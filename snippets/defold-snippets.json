{"vmath.vector4(n)": [{"body": "vmath.vector4(${1:n})", "prefix": "vmath.vector4(n)", "description": "creates a new vector from scalar value"}], "file:read(...)": [{"body": "file:read(${1:...})", "prefix": "file:read(...)", "description": "reads the file according to the specified formats"}], "render.FORMAT_RGB_DXT1": [{"body": "render.FORMAT_RGB_DXT1", "prefix": "render.FORMAT_RGB_DXT1", "description": ""}], "gui.ADJUST_ZOOM": [{"body": "gui.ADJUST_ZOOM", "prefix": "gui.ADJUST_ZOOM", "description": "zoom adjust mode"}], "go.EASING_OUTINQUINT": [{"body": "go.EASING_OUTINQUINT", "prefix": "go.EASING_OUTINQUINT", "description": "out-in-quintic"}], "gui.SIZE_MODE_AUTO": [{"body": "gui.SIZE_MODE_AUTO", "prefix": "gui.SIZE_MODE_AUTO", "description": "automatic size mode"}], "exit(code)": [{"body": "msg.post(${1:receiver}, \"exit\", ${2:{${3:code}\\}})", "prefix": "exit(code)", "description": "exits application"}], "unconnected:sendto(datagram, ip, port)": [{"body": "unconnected:sendto(${1:datagram}, ${2:ip}, ${3:port})", "prefix": "unconnected:sendto(datagram, ip, port)", "description": "sends a datagram through the UDP socket to the specified IP address and port number"}], "resource.set_buffer(path, buffer)": [{"body": "resource.set_buffer(${1:path}, ${2:buffer})", "prefix": "resource.set_buffer(path, buffer)", "description": "set resource buffer"}], "gui.EASING_LINEAR": [{"body": "gui.EASING_LINEAR", "prefix": "gui.EASING_LINEAR", "description": "linear interpolation"}], "skin": [{"body": "\"skin\"", "prefix": "skin", "description": "hash spine skin"}], "unpack(list, [i], [j])": [{"body": "unpack(${1:list}, ${2:[i]}, ${3:[j]})", "prefix": "unpack(list, [i], [j])", "description": "unpacks a table into individual items"}], "physics.JOINT_TYPE_HINGE(reference_angle, lower_angle, upper_angle, max_motor_torque, motor_speed, enable_limit, enable_motor, joint_angle, joint_speed)": [{"body": "physics.JOINT_TYPE_HINGE", "prefix": "physics.JOINT_TYPE_HINGE(reference_angle, lower_angle, upper_angle, max_motor_torque, motor_speed, enable_limit, enable_motor, joint_angle, joint_speed)", "description": "hinge joint type"}], "render.STATE_BLEND": [{"body": "render.STATE_BLEND", "prefix": "render.STATE_BLEND", "description": ""}], "particlefx.play(url, [emitter_state_function])": [{"body": "particlefx.play(${1:url}, ${2:[emitter_state_function]})", "prefix": "particlefx.play(url, [emitter_state_function])", "description": "start playing a particle FX"}], "assert(v, [message])": [{"body": "assert(${1:v}, ${2:[message]})", "prefix": "assert(v, [message])", "description": "asserts that condition is not nil and not false"}], "render.WRAP_CLAMP_TO_BORDER": [{"body": "render.WRAP_CLAMP_TO_BORDER", "prefix": "render.WRAP_CLAMP_TO_BORDER", "description": ""}], "connected:setoption(option, [value])": [{"body": "connected:setoption(${1:option}, ${2:[value]})", "prefix": "connected:setoption(option, [value])", "description": "sets options for the UDP socket"}], "spine.set_skin(url, spine_skin, [spine_slot])": [{"body": "spine.set_skin(${1:url}, ${2:spine_skin}, ${3:[spine_slot]})", "prefix": "spine.set_skin(url, spine_skin, [spine_slot])", "description": "sets the spine skin"}], "io.popen(prog, [mode])": [{"body": "io.popen(${1:prog}, ${2:[mode]})", "prefix": "io.popen(prog, [mode])", "description": "creates a pipe and executes a command"}], "go.cancel_animations(url, property)": [{"body": "go.cancel_animations(${1:url}, ${2:property})", "prefix": "go.cancel_animations(url, property)", "description": "cancels all animations of the named property of the specified game object or component"}], "render.STENCIL_OP_INVERT": [{"body": "render.STENCIL_OP_INVERT", "prefix": "render.STENCIL_OP_INVERT", "description": ""}], "crash.get_user_field(handle, index)": [{"body": "crash.get_user_field(${1:handle}, ${2:index})", "prefix": "crash.get_user_field(handle, index)", "description": "reads user field from a loaded crash dump"}], "math.huge": [{"body": "math.huge", "prefix": "math.huge", "description": "a huge value"}], "render.get_height": [{"body": "render.get_height()", "prefix": "render.get_height", "description": "gets the window height, as specified for the project"}], "server:dirty": [{"body": "server:dirty()", "prefix": "server:dirty", "description": "checks the read buffer status"}], "loadstring(string, [chunkname])": [{"body": "loadstring(${1:string}, ${2:[chunkname]})", "prefix": "loadstring(string, [chunkname])", "description": "compiles a string of Lua code"}], "init": [{"body": "msg.post(${1:receiver}, \"init\")", "prefix": "init", "description": "tells a collection proxy to initialize the loaded collection"}], "master:close": [{"body": "master:close()", "prefix": "master:close", "description": "closes a master TCP object"}], "window.DIMMING_UNKNOWN": [{"body": "window.DIMMING_UNKNOWN", "prefix": "window.DIMMING_UNKNOWN", "description": "dimming mode unknown"}], "stop_sound": [{"body": "msg.post(${1:receiver}, \"stop_sound\")", "prefix": "stop_sound", "description": "stop a playing a sound(s)"}], "resource.TEXTURE_FORMAT_RGBA": [{"body": "resource.TEXTURE_FORMAT_RGBA", "prefix": "resource.TEXTURE_FORMAT_RGBA", "description": "RGBA type texture format"}], "go.EASING_OUTINQUAD": [{"body": "go.EASING_OUTINQUAD", "prefix": "go.EASING_OUTINQUAD", "description": "out-in-quadratic"}], "collectionfactory.STATUS_UNLOADED": [{"body": "collectionfactory.STATUS_UNLOADED", "prefix": "collectionfactory.STATUS_UNLOADED", "description": "unloaded"}], "client:setoption(option, [value])": [{"body": "client:setoption(${1:option}, ${2:[value]})", "prefix": "client:setoption(option, [value])", "description": "sets options for the socket"}], "gui.move_below(node, node)": [{"body": "gui.move_below(${1:node}, ${2:node})", "prefix": "gui.move_below(node, node)", "description": "moves the first node below the second"}], "DM_SAVE_HOME": [{"body": "DM_SAVE_HOME", "prefix": "DM_SAVE_HOME", "description": "override the save directory"}], "type(v)": [{"body": "type(${1:v})", "prefix": "type(v)", "description": "returns the type of a variable"}], "render.get_render_target_height(render_target, buffer_type)": [{"body": "render.get_render_target_height(${1:render_target}, ${2:buffer_type})", "prefix": "render.get_render_target_height(render_target, buffer_type)", "description": "retrieve a buffer height from a render target"}], "tilemap.set_visible(url, layer, visible)": [{"body": "tilemap.set_visible(${1:url}, ${2:layer}, ${3:visible})", "prefix": "tilemap.set_visible(url, layer, visible)", "description": "set the visibility of a layer"}], "render.BLEND_CONSTANT_COLOR": [{"body": "render.BLEND_CONSTANT_COLOR", "prefix": "render.BLEND_CONSTANT_COLOR", "description": ""}], "math.abs(x)": [{"body": "math.abs(${1:x})", "prefix": "math.abs(x)", "description": "absolute value"}], "model_animation_done(animation_id, playback)": [{"body": "msg.post(${1:receiver}, \"model_animation_done\", ${2:{${3:animation_id}, ${4:playback}\\}})", "prefix": "model_animation_done(animation_id, playback)", "description": "reports the completion of a Model animation"}], "gui.PIEBOUNDS_RECTANGLE": [{"body": "gui.PIEBOUNDS_RECTANGLE", "prefix": "gui.PIEBOUNDS_RECTANGLE", "description": "rectangular pie node bounds"}], "client:getoption(option)": [{"body": "client:getoption(${1:option})", "prefix": "client:getoption(option)", "description": "gets options for the socket"}], "sys.get_application_info(app_string)": [{"body": "sys.get_application_info(${1:app_string})", "prefix": "sys.get_application_info(app_string)", "description": "get application information"}], "gui.reset_keyboard": [{"body": "gui.reset_keyboard()", "prefix": "gui.reset_keyboard", "description": "resets on-display keyboard if available"}], "vmath.quat(x, y, z, w)": [{"body": "vmath.quat(${1:x}, ${2:y}, ${3:z}, ${4:w})", "prefix": "vmath.quat(x, y, z, w)", "description": "creates a new quaternion from its coordinates"}], "render.BLEND_DST_ALPHA": [{"body": "render.BLEND_DST_ALPHA", "prefix": "render.BLEND_DST_ALPHA", "description": ""}], "render.set_stencil_op(sfail, dpfail, dppass)": [{"body": "render.set_stencil_op(${1:sfail}, ${2:dpfail}, ${3:dppass})", "prefix": "render.set_stencil_op(sfail, dpfail, dppass)", "description": "sets the stencil operator"}], "gui.EASING_INEXPO": [{"body": "gui.EASING_INEXPO", "prefix": "gui.EASING_INEXPO", "description": "in-exponential"}], "go.get_world_position([id])": [{"body": "go.get_world_position(${1:[id]})", "prefix": "go.get_world_position([id])", "description": "gets the game object instance world position"}], "spine_event(event_id, animation_id, t, blend_weight, integer, float, string, node)": [{"body": "msg.post(${1:receiver}, \"spine_event\", ${2:{${3:event_id}, ${4:animation_id}, ${5:t}, ${6:blend_weight}, ${7:integer}, ${8:float}, ${9:string}, ${10:node}\\}})", "prefix": "spine_event(event_id, animation_id, t, blend_weight, integer, float, string, node)", "description": "reports an incoming event from the Spine animation"}], "gui.set_flipbook_cursor(node, cursor)": [{"body": "gui.set_flipbook_cursor(${1:node}, ${2:cursor})", "prefix": "gui.set_flipbook_cursor(node, cursor)", "description": "sets the normalized cursor of the animation on a node with flipbook animation"}], "sys.NETWORK_CONNECTED_CELLULAR": [{"body": "sys.NETWORK_CONNECTED_CELLULAR", "prefix": "sys.NETWORK_CONNECTED_CELLULAR", "description": "network connected through mobile cellular"}], "go.animate(url, property, playback, to, easing, duration, [delay], [complete_function])": [{"body": "go.animate(${1:url}, ${2:property}, ${3:playback}, ${4:to}, ${5:easing}, ${6:duration}, ${7:[delay]}, ${8:[complete_function]})", "prefix": "go.animate(url, property, playback, to, easing, duration, [delay], [complete_function])", "description": "animates a named property of the specified game object or component"}], "gui.EASING_INOUTQUINT": [{"body": "gui.EASING_INOUTQUINT", "prefix": "gui.EASING_INOUTQUINT", "description": "in-out-quintic"}], "gui.PROP_SLICE9": [{"body": "gui.PROP_SLICE9", "prefix": "gui.PROP_SLICE9", "description": "slice9 property"}], "math.frexp(x)": [{"body": "math.frexp(${1:x})", "prefix": "math.frexp(x)", "description": "break number into mantissa and exponent"}], "go.EASING_OUTQUINT": [{"body": "go.EASING_OUTQUINT", "prefix": "go.EASING_OUTQUINT", "description": "out-quintic"}], "render.get_window_width": [{"body": "render.get_window_width()", "prefix": "render.get_window_width", "description": "gets the actual window width"}], "draw_debug_text(position, text, color)": [{"body": "msg.post(${1:receiver}, \"draw_debug_text\", ${2:{${3:position}, ${4:text}, ${5:color}\\}})", "prefix": "draw_debug_text(position, text, color)", "description": "draw a text on the screen"}], "particlefx.stop(url)": [{"body": "particlefx.stop(${1:url})", "prefix": "particlefx.stop(url)", "description": "stop playing a particle fx"}], "gui.get_shadow(node)": [{"body": "gui.get_shadow(${1:node})", "prefix": "gui.get_shadow(node)", "description": "gets the node shadow color"}], "io.output([file])": [{"body": "io.output(${1:[file]})", "prefix": "io.output([file])", "description": "opens a file for output"}], "render.STATE_DEPTH_TEST": [{"body": "render.STATE_DEPTH_TEST", "prefix": "render.STATE_DEPTH_TEST", "description": ""}], "next(table, [index])": [{"body": "next(${1:table}, ${2:[index]})", "prefix": "next(table, [index])", "description": "returns next key / value pair in a table"}], "render.STENCIL_OP_DECR_WRAP": [{"body": "render.STENCIL_OP_DECR_WRAP", "prefix": "render.STENCIL_OP_DECR_WRAP", "description": ""}], "gui.set_position(node, position)": [{"body": "gui.set_position(${1:node}, ${2:position})", "prefix": "gui.set_position(node, position)", "description": "sets the node position"}], "math.acos(x)": [{"body": "math.acos(${1:x})", "prefix": "math.acos(x)", "description": "arc cosine"}], "pprint(v)": [{"body": "pprint(${1:v})", "prefix": "pprint(v)", "description": "pretty printing"}], "trigger_response(other_id, enter, other_group, own_group)": [{"body": "msg.post(${1:receiver}, \"trigger_response\", ${2:{${3:other_id}, ${4:enter}, ${5:other_group}, ${6:own_group}\\}})", "prefix": "trigger_response(other_id, enter, other_group, own_group)", "description": "reports interaction (enter/exit) between a trigger collision object and another collision object"}], "package.loadlib(libname, funcname)": [{"body": "package.loadlib(${1:libname}, ${2:funcname})", "prefix": "package.loadlib(libname, funcname)", "description": "loads a dynamic link library (DLL)"}], "string.len(s)": [{"body": "string.len(${1:s})", "prefix": "string.len(s)", "description": "return the length of a string"}], "string.byte(s, [i], [j])": [{"body": "string.byte(${1:s}, ${2:[i]}, ${3:[j]})", "prefix": "string.byte(s, [i], [j])", "description": "converts a character into its ASCII (decimal) equivalent"}], "physics.set_hflip(url, flip)": [{"body": "physics.set_hflip(${1:url}, ${2:flip})", "prefix": "physics.set_hflip(url, flip)", "description": "flip the geometry horizontally for a collision object"}], "tilemap.set_tile(url, layer, x, y, tile, [h-flipped], [v-flipped])": [{"body": "tilemap.set_tile(${1:url}, ${2:layer}, ${3:x}, ${4:y}, ${5:tile}, ${6:[h-flipped]}, ${7:[v-flipped]})", "prefix": "tilemap.set_tile(url, layer, x, y, tile, [h-flipped], [v-flipped])", "description": "set a tile in a tile map"}], "gui.PIVOT_NW": [{"body": "gui.PIVOT_NW", "prefix": "gui.PIVOT_NW", "description": "north-west pivot"}], "server:setfd(handle)": [{"body": "server:setfd(${1:handle})", "prefix": "server:setfd(handle)", "description": "sets the socket descriptor"}], "gui.play_flipbook(node, animation, [complete_function], [play_properties])": [{"body": "gui.play_flipbook(${1:node}, ${2:animation}, ${3:[complete_function]}, ${4:[play_properties]})", "prefix": "gui.play_flipbook(node, animation, [complete_function], [play_properties])", "description": "play node flipbook animation"}], "go.EASING_OUTINBACK": [{"body": "go.EASING_OUTINBACK", "prefix": "go.EASING_OUTINBACK", "description": "out-in-back"}], "gui.set_texture(node, texture)": [{"body": "gui.set_texture(${1:node}, ${2:texture})", "prefix": "gui.set_texture(node, texture)", "description": "sets the node texture"}], "sys.get_config(key)": [{"body": "sys.get_config(${1:key})", "prefix": "sys.get_config(key)", "description": "get config value"}], "client:settimeout(value, [mode])": [{"body": "client:settimeout(${1:value}, ${2:[mode]})", "prefix": "client:settimeout(value, [mode])", "description": "set the timeout values for the socket"}], "go.EASING_OUTINELASTIC": [{"body": "go.EASING_OUTINELASTIC", "prefix": "go.EASING_OUTINELASTIC", "description": "out-in-elastic"}], "vmath.inv(m1)": [{"body": "vmath.inv(${1:m1})", "prefix": "vmath.inv(m1)", "description": "calculates the inverse matrix."}], "render.BLEND_ONE_MINUS_CONSTANT_ALPHA": [{"body": "render.BLEND_ONE_MINUS_CONSTANT_ALPHA", "prefix": "render.BLEND_ONE_MINUS_CONSTANT_ALPHA", "description": ""}], "gui.get_screen_position(node)": [{"body": "gui.get_screen_position(${1:node})", "prefix": "gui.get_screen_position(node)", "description": "gets the node screen position"}], "bit.bor(x1, [x2...])": [{"body": "bit.bor(${1:x1}, ${2:[x2...]})", "prefix": "bit.bor(x1, [x2...])", "description": "bitwise or"}], "math.exp(x)": [{"body": "math.exp(${1:x})", "prefix": "math.exp(x)", "description": "raises e to a power"}], "gui.pick_node(node, x, y)": [{"body": "gui.pick_node(${1:node}, ${2:x}, ${3:y})", "prefix": "gui.pick_node(node, x, y)", "description": "determines if the node is pickable by the supplied coordinates"}], "factory.unload([url])": [{"body": "factory.unload(${1:[url]})", "prefix": "factory.unload([url])", "description": "Unload resources previously loaded using factory.load"}], "debug.setmetatable(object, table)": [{"body": "debug.setmetatable(${1:object}, ${2:table})", "prefix": "debug.setmetatable(object, table)", "description": "sets the metatable for an object"}], "server:accept": [{"body": "server:accept()", "prefix": "server:accept", "description": "waits for a remote connection on the server object"}], "go.PLAYBACK_NONE": [{"body": "go.PLAYBACK_NONE", "prefix": "go.PLAYBACK_NONE", "description": "no playback"}], "client:setfd(handle)": [{"body": "client:setfd(${1:handle})", "prefix": "client:setfd(handle)", "description": "sets the socket descriptor"}], "collectionproxy.missing_resources(collectionproxy)": [{"body": "collectionproxy.missing_resources(${1:collectionproxy})", "prefix": "collectionproxy.missing_resources(collectionproxy)", "description": "return an indexed table of missing resources for a collection proxy"}], "bit.rshift(x, n)": [{"body": "bit.rshift(${1:x}, ${2:n})", "prefix": "bit.rshift(x, n)", "description": "bitwise logical right-shift"}], "go.EASING_OUTINBOUNCE": [{"body": "go.EASING_OUTINBOUNCE", "prefix": "go.EASING_OUTINBOUNCE", "description": "out-in-bounce"}], "gui.set_shadow(node, color)": [{"body": "gui.set_shadow(${1:node}, ${2:color})", "prefix": "gui.set_shadow(node, color)", "description": "sets the node shadow color"}], "buffer.VALUE_TYPE_INT64": [{"body": "buffer.VALUE_TYPE_INT64", "prefix": "buffer.VALUE_TYPE_INT64", "description": "int64"}], "vmath.vector4": [{"body": "vmath.vector4()", "prefix": "vmath.vector4", "description": "creates a new zero vector"}], "gui.stop_particlefx(node)": [{"body": "gui.stop_particlefx(${1:node})", "prefix": "gui.stop_particlefx(node)", "description": "Stops a particle fx"}], "gui.set_clipping_visible(node, visible)": [{"body": "gui.set_clipping_visible(${1:node}, ${2:visible})", "prefix": "gui.set_clipping_visible(node, visible)", "description": "sets node clipping visibility"}], "vmath.vector3": [{"body": "vmath.vector3()", "prefix": "vmath.vector3", "description": "creates a new zero vector"}], "gui.set_yanchor(node, anchor)": [{"body": "gui.set_yanchor(${1:node}, ${2:anchor})", "prefix": "gui.set_yanchor(node, anchor)", "description": "sets the y-anchor of a node"}], "gui.is_enabled(node)": [{"body": "gui.is_enabled(${1:node})", "prefix": "gui.is_enabled(node)", "description": "returns if a node is enabled or not"}], "gui.get_size_mode(node)": [{"body": "gui.get_size_mode(${1:node})", "prefix": "gui.get_size_mode(node)", "description": "gets the node size mode"}], "go.EASING_INSINE": [{"body": "go.EASING_INSINE", "prefix": "go.EASING_INSINE", "description": "in-sine"}], "render.set_color_mask(red, green, blue, alpha)": [{"body": "render.set_color_mask(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})", "prefix": "render.set_color_mask(red, green, blue, alpha)", "description": "sets the color mask"}], "client:close": [{"body": "client:close()", "prefix": "client:close", "description": "closes a client TCP object"}], "profiler.recorded_frame_count": [{"body": "profiler.recorded_frame_count()", "prefix": "profiler.recorded_frame_count", "description": "get the number of recorded frames in the on-screen profiler ui"}], "socket.tcp6": [{"body": "socket.tcp6()", "prefix": "socket.tcp6", "description": "creates a new IPv6 TCP master object"}], "load(func, [chunkname])": [{"body": "load(${1:func}, ${2:[chunkname]})", "prefix": "load(func, [chunkname])", "description": "loads a chunk by calling a function repeatedly"}], "gui.PIEBOUNDS_ELLIPSE": [{"body": "gui.PIEBOUNDS_ELLIPSE", "prefix": "gui.PIEBOUNDS_ELLIPSE", "description": "elliptical pie node bounds"}], "go.EASING_OUTCUBIC": [{"body": "go.EASING_OUTCUBIC", "prefix": "go.EASING_OUTCUBIC", "description": "out-cubic"}], "particlefx.EMITTER_STATE_SPAWNING": [{"body": "particlefx.EMITTER_STATE_SPAWNING", "prefix": "particlefx.EMITTER_STATE_SPAWNING", "description": "spawning state"}], "render.BLEND_ONE_MINUS_SRC_COLOR": [{"body": "render.BLEND_ONE_MINUS_SRC_COLOR", "prefix": "render.BLEND_ONE_MINUS_SRC_COLOR", "description": ""}], "go.EASING_INQUAD": [{"body": "go.EASING_INQUAD", "prefix": "go.EASING_INQUAD", "description": "in-quadratic"}], "play_animation(id)": [{"body": "msg.post(${1:receiver}, \"play_animation\", ${2:{${3:id}\\}})", "prefix": "play_animation(id)", "description": "play a sprite animation"}], "textureN": [{"body": "\"textureN\"", "prefix": "textureN", "description": "hash model textureN where N is 0-7"}], "gui.get_height": [{"body": "gui.get_height()", "prefix": "gui.get_height", "description": "gets the scene height"}], "socket.newtry(finalizer)": [{"body": "socket.newtry(${1:finalizer})", "prefix": "socket.newtry(finalizer)", "description": "creates a new try function"}], "gui.PIVOT_S": [{"body": "gui.PIVOT_S", "prefix": "gui.PIVOT_S", "description": "south pivot"}], "render.STATE_CULL_FACE": [{"body": "render.STATE_CULL_FACE", "prefix": "render.STATE_CULL_FACE", "description": ""}], "render.predicate(tags)": [{"body": "render.predicate(${1:tags})", "prefix": "render.predicate(tags)", "description": "creates a new render predicate"}], "render.WRAP_MIRRORED_REPEAT": [{"body": "render.WRAP_MIRRORED_REPEAT", "prefix": "render.WRAP_MIRRORED_REPEAT", "description": ""}], "init(self)": [{"body": "init(${1:self})", "prefix": "init(self)", "description": "called when a script component is initialized"}, {"body": "init(${1:self})", "prefix": "init(self)", "description": "called when a gui component is initialized"}], "crash.SYSFIELD_LANGUAGE": [{"body": "crash.SYSFIELD_LANGUAGE", "prefix": "crash.SYSFIELD_LANGUAGE", "description": "system language as reported by sys.get_sys_info"}], "resource.set_texture(path, table, buffer)": [{"body": "resource.set_texture(${1:path}, ${2:table}, ${3:buffer})", "prefix": "resource.set_texture(path, table, buffer)", "description": "set a texture"}], "window.DIMMING_ON": [{"body": "window.DIMMING_ON", "prefix": "window.DIMMING_ON", "description": "dimming mode on"}], "gui.EASING_INCUBIC": [{"body": "gui.EASING_INCUBIC", "prefix": "gui.EASING_INCUBIC", "description": "in-cubic"}], "gui.EASING_OUTINQUART": [{"body": "gui.EASING_OUTINQUART", "prefix": "gui.EASING_OUTINQUART", "description": "out-in-quartic"}], "server:getoption(option)": [{"body": "server:getoption(${1:option})", "prefix": "server:getoption(option)", "description": "gets options for the socket"}], "xpcall(f, err)": [{"body": "xpcall(${1:f}, ${2:err})", "prefix": "xpcall(f, err)", "description": "calls a function with a custom error handler"}], "go.get_scale_uniform([id])": [{"body": "go.get_scale_uniform(${1:[id]})", "prefix": "go.get_scale_uniform([id])", "description": "gets the uniform scale factor of the game object instance"}], "gui.KEYBOARD_TYPE_DEFAULT": [{"body": "gui.KEYBOARD_TYPE_DEFAULT", "prefix": "gui.KEYBOARD_TYPE_DEFAULT", "description": "default keyboard"}], "on_message(self, message_id, message, sender)": [{"body": "on_message(${1:self}, ${2:message_id}, ${3:message}, ${4:sender})", "prefix": "on_message(self, message_id, message, sender)", "description": "called when a message has been sent to the script component"}], "go.EASING_LINEAR": [{"body": "go.EASING_LINEAR", "prefix": "go.EASING_LINEAR", "description": "linear interpolation"}], "profiler.set_ui_vsync_wait_visible(visible)": [{"body": "profiler.set_ui_vsync_wait_visible(${1:visible})", "prefix": "profiler.set_ui_vsync_wait_visible(visible)", "description": "Shows or hides the vsync wait time in the on-screen profiler ui"}], "gui.EASING_OUTINEXPO": [{"body": "gui.EASING_OUTINEXPO", "prefix": "gui.EASING_OUTINEXPO", "description": "out-in-exponential"}], "set_camera(aspect_ratio, fov, near_z, far_z)": [{"body": "msg.post(${1:receiver}, \"set_camera\", ${2:{${3:aspect_ratio}, ${4:fov}, ${5:near_z}, ${6:far_z}\\}})", "prefix": "set_camera(aspect_ratio, fov, near_z, far_z)", "description": "sets camera properties"}], "vmath.quat_from_to(v1, v2)": [{"body": "vmath.quat_from_to(${1:v1}, ${2:v2})", "prefix": "vmath.quat_from_to(v1, v2)", "description": "creates a quaternion to rotate between two unit vectors"}], "window.WINDOW_EVENT_RESIZED": [{"body": "window.WINDOW_EVENT_RESIZED", "prefix": "window.WINDOW_EVENT_RESIZED", "description": "resized window event"}], "go.PLAYBACK_LOOP_FORWARD": [{"body": "go.PLAYBACK_LOOP_FORWARD", "prefix": "go.PLAYBACK_LOOP_FORWARD", "description": "loop forward"}], "go.set_parent([id], [parent_id], [keep_world_transform])": [{"body": "go.set_parent(${1:[id]}, ${2:[parent_id]}, ${3:[keep_world_transform]})", "prefix": "go.set_parent([id], [parent_id], [keep_world_transform])", "description": "sets the parent for a specific game object instance"}], "label.get_text_metrics(url)": [{"body": "label.get_text_metrics(${1:url})", "prefix": "label.get_text_metrics(url)", "description": "gets the text metrics for a label"}], "collectionfactory.STATUS_LOADING": [{"body": "collectionfactory.STATUS_LOADING", "prefix": "collectionfactory.STATUS_LOADING", "description": "loading"}], "gui.EASING_INBACK": [{"body": "gui.EASING_INBACK", "prefix": "gui.EASING_INBACK", "description": "in-back"}], "gui.EASING_INOUTCIRC": [{"body": "gui.EASING_INOUTCIRC", "prefix": "gui.EASING_INOUTCIRC", "description": "in-out-circlic"}], "vmath.matrix4_look_at(eye, look_at, up)": [{"body": "vmath.matrix4_look_at(${1:eye}, ${2:look_at}, ${3:up})", "prefix": "vmath.matrix4_look_at(eye, look_at, up)", "description": "creates a look-at view matrix"}], "socket.udp6": [{"body": "socket.udp6()", "prefix": "socket.udp6", "description": "creates a new IPv6 UDP object"}], "gui.get_inner_radius(node)": [{"body": "gui.get_inner_radius(${1:node})", "prefix": "gui.get_inner_radius(node)", "description": "gets the pie inner radius"}], "gui.EASING_INOUTBOUNCE": [{"body": "gui.EASING_INOUTBOUNCE", "prefix": "gui.EASING_INOUTBOUNCE", "description": "in-out-bounce"}], "crash.SYSFIELD_SYSTEM_NAME": [{"body": "crash.SYSFIELD_SYSTEM_NAME", "prefix": "crash.SYSFIELD_SYSTEM_NAME", "description": "system name as reported by sys.get_sys_info"}], "gui.set_outline(node, color)": [{"body": "gui.set_outline(${1:node}, ${2:color})", "prefix": "gui.set_outline(node, color)", "description": "sets the node outline color"}], "resource.store_manifest(manifest_buffer, callback)": [{"body": "resource.store_manifest(${1:manifest_buffer}, ${2:callback})", "prefix": "resource.store_manifest(manifest_buffer, callback)", "description": "create, verify, and store a manifest to device"}], "gui.get_outline(node)": [{"body": "gui.get_outline(${1:node})", "prefix": "gui.get_outline(node)", "description": "gets the node outline color"}], "resource.LIVEUPDATE_SIGNATURE_MISMATCH": [{"body": "resource.LIVEUPDATE_SIGNATURE_MISMATCH", "prefix": "resource.LIVEUPDATE_SIGNATURE_MISMATCH", "description": "LIVEUPDATE_SIGNATURE_MISMATCH"}], "vmath.quat(q1)": [{"body": "vmath.quat(${1:q1})", "prefix": "vmath.quat(q1)", "description": "creates a new quaternion from another existing quaternion"}], "resource.TEXTURE_TYPE_2D": [{"body": "resource.TEXTURE_TYPE_2D", "prefix": "resource.TEXTURE_TYPE_2D", "description": "2D texture type"}], "sys.reboot(arg1, arg2, arg3, arg4, arg5, arg6)": [{"body": "sys.reboot(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6})", "prefix": "sys.reboot(arg1, arg2, arg3, arg4, arg5, arg6)", "description": "reboot engine with arguments"}], "resource.texture([path])": [{"body": "resource.texture(${1:[path]})", "prefix": "resource.texture([path])", "description": "reference to texture resource"}], "crash.set_file_path(path)": [{"body": "crash.set_file_path(${1:path})", "prefix": "crash.set_file_path(path)", "description": "sets the file location for crash dumps"}], "--verify-graphics-calls=": [{"body": "--verify-graphics-calls=", "prefix": "--verify-graphics-calls=", "description": "disables OpenGL error checking"}], "gui.EASING_INOUTSINE": [{"body": "gui.EASING_INOUTSINE", "prefix": "gui.EASING_INOUTSINE", "description": "in-out-sine"}], "render.set_projection(matrix)": [{"body": "render.set_projection(${1:matrix})", "prefix": "render.set_projection(matrix)", "description": "sets the projection matrix"}], "render.BUFFER_STENCIL_BIT": [{"body": "render.BUFFER_STENCIL_BIT", "prefix": "render.BUFFER_STENCIL_BIT", "description": ""}], "render.WRAP_CLAMP_TO_EDGE": [{"body": "render.WRAP_CLAMP_TO_EDGE", "prefix": "render.WRAP_CLAMP_TO_EDGE", "description": ""}], "vmath.dot(v1, v2)": [{"body": "vmath.dot(${1:v1}, ${2:v2})", "prefix": "vmath.dot(v1, v2)", "description": "calculates the dot-product of two vectors"}], "sound.set_gain(url, [gain])": [{"body": "sound.set_gain(${1:url}, ${2:[gain]})", "prefix": "sound.set_gain(url, [gain])", "description": "set sound gain"}], "math.tan(x)": [{"body": "math.tan(${1:x})", "prefix": "math.tan(x)", "description": "tangent"}], "release_input_focus": [{"body": "msg.post(${1:receiver}, \"release_input_focus\")", "prefix": "release_input_focus", "description": "releases the user input focus"}], "go.get_world_rotation([id])": [{"body": "go.get_world_rotation(${1:[id]})", "prefix": "go.get_world_rotation([id])", "description": "gets the game object instance world rotation"}], "module(name, [...])": [{"body": "module(${1:name}, ${2:[...]})", "prefix": "module(name, [...])", "description": "creates a Lua module"}], "server:setoption(option, [value])": [{"body": "server:setoption(${1:option}, ${2:[value]})", "prefix": "server:setoption(option, [value])", "description": "sets options for the socket"}], "buffer.copy_buffer(dst, dstoffset, src, srcoffset, count)": [{"body": "buffer.copy_buffer(${1:dst}, ${2:dstoffset}, ${3:src}, ${4:srcoffset}, ${5:count})", "prefix": "buffer.copy_buffer(dst, dstoffset, src, srcoffset, count)", "description": "copies one buffer to another"}], "apply_force(force, position)": [{"body": "msg.post(${1:receiver}, \"apply_force\", ${2:{${3:force}, ${4:position}\\}})", "prefix": "apply_force(force, position)", "description": "applies a force on a collision object"}], "set_time_step(factor, mode)": [{"body": "msg.post(${1:receiver}, \"set_time_step\", ${2:{${3:factor}, ${4:mode}\\}})", "prefix": "set_time_step(factor, mode)", "description": "sets the time-step for update"}], "gui.get_xanchor(node)": [{"body": "gui.get_xanchor(${1:node})", "prefix": "gui.get_xanchor(node)", "description": "gets the x-anchor of a node"}], "buffer.VALUE_TYPE_UINT8": [{"body": "buffer.VALUE_TYPE_UINT8", "prefix": "buffer.VALUE_TYPE_UINT8", "description": "uint8"}], "zlib.inflate(buf)": [{"body": "zlib.inflate(${1:buf})", "prefix": "zlib.inflate(buf)", "description": "Inflate (decompress) a buffer"}], "render.BLEND_ZERO": [{"body": "render.BLEND_ZERO", "prefix": "render.BLEND_ZERO", "description": ""}], "sound.get_rms(group, window)": [{"body": "sound.get_rms(${1:group}, ${2:window})", "prefix": "sound.get_rms(group, window)", "description": "get RMS value from mixer group"}], "sys.get_config(key, default_value)": [{"body": "sys.get_config(${1:key}, ${2:default_value})", "prefix": "sys.get_config(key, default_value)", "description": "get config value with default value"}], "_VERSION": [{"body": "_VERSION", "prefix": "_VERSION", "description": "global variable containing the running Lua version"}], "render.COMPARE_FUNC_LEQUAL": [{"body": "render.COMPARE_FUNC_LEQUAL", "prefix": "render.COMPARE_FUNC_LEQUAL", "description": ""}], "toggle_profile": [{"body": "msg.post(${1:receiver}, \"toggle_profile\")", "prefix": "toggle_profile", "description": "shows/hides the on-screen profiler"}], "gui.set_spine_skin(node, spine_skin, [spine_slot])": [{"body": "gui.set_spine_skin(${1:node}, ${2:spine_skin}, ${3:[spine_slot]})", "prefix": "gui.set_spine_skin(node, spine_skin, [spine_slot])", "description": "sets the spine skin"}], "sound.get_groups": [{"body": "sound.get_groups()", "prefix": "sound.get_groups", "description": "get all mixer group names"}], "go.get_id([path])": [{"body": "go.get_id(${1:[path]})", "prefix": "go.get_id([path])", "description": "gets the id of an instance"}], "gui.set_enabled(node, enabled)": [{"body": "gui.set_enabled(${1:node}, ${2:enabled})", "prefix": "gui.set_enabled(node, enabled)", "description": "enables/disables a node"}], "gui.set_line_break(node, line_break)": [{"body": "gui.set_line_break(${1:node}, ${2:line_break})", "prefix": "gui.set_line_break(node, line_break)", "description": "set line-break mode"}], "gui.PLAYBACK_ONCE_FORWARD": [{"body": "gui.PLAYBACK_ONCE_FORWARD", "prefix": "gui.PLAYBACK_ONCE_FORWARD", "description": "once forward"}], "go.EASING_INOUTQUART": [{"body": "go.EASING_INOUTQUART", "prefix": "go.EASING_INOUTQUART", "description": "in-out-quartic"}], "gui.EASING_INQUART": [{"body": "gui.EASING_INQUART", "prefix": "gui.EASING_INQUART", "description": "in-quartic"}], "label.set_text(url, text)": [{"body": "label.set_text(${1:url}, ${2:text})", "prefix": "label.set_text(url, text)", "description": "set the text for a label"}], "gui.EASING_OUTCIRC": [{"body": "gui.EASING_OUTCIRC", "prefix": "gui.EASING_OUTCIRC", "description": "out-circlic"}], "math.modf(x)": [{"body": "math.modf(${1:x})", "prefix": "math.modf(x)", "description": "returns the integral and fractional part of its argument"}], "debug.setlocal([thread], level, local, value)": [{"body": "debug.setlocal(${1:[thread]}, ${2:level}, ${3:local}, ${4:value})", "prefix": "debug.setlocal([thread], level, local, value)", "description": "sets the value of the local variable"}], "gui.set_render_order(order)": [{"body": "gui.set_render_order(${1:order})", "prefix": "gui.set_render_order(order)", "description": "sets the render ordering for the current GUI scene"}], "string.format(formatstring, ...)": [{"body": "string.format(${1:formatstring}, ${2:...})", "prefix": "string.format(formatstring, ...)", "description": "formats a string"}], "msg.url([socket], [path], [fragment])": [{"body": "msg.url(${1:[socket]}, ${2:[path]}, ${3:[fragment]})", "prefix": "msg.url([socket], [path], [fragment])", "description": "creates a new URL from separate arguments"}], "resource.atlas([path])": [{"body": "resource.atlas(${1:[path]})", "prefix": "resource.atlas([path])", "description": "reference to atlas resource"}], "go.PLAYBACK_ONCE_PINGPONG": [{"body": "go.PLAYBACK_ONCE_PINGPONG", "prefix": "go.PLAYBACK_ONCE_PINGPONG", "description": "once ping pong"}], "render.delete_render_target(render_target)": [{"body": "render.delete_render_target(${1:render_target})", "prefix": "render.delete_render_target(render_target)", "description": "deletes a render target"}], "render.enable_material(material_id)": [{"body": "render.enable_material(${1:material_id})", "prefix": "render.enable_material(material_id)", "description": "enables a material"}], "gui.get_line_break(node)": [{"body": "gui.get_line_break(${1:node})", "prefix": "gui.get_line_break(node)", "description": "get line-break mode"}], "io.type(obj)": [{"body": "io.type(${1:obj})", "prefix": "io.type(obj)", "description": "returns type of file handle"}], "gui.PLAYBACK_LOOP_BACKWARD": [{"body": "gui.PLAYBACK_LOOP_BACKWARD", "prefix": "gui.PLAYBACK_LOOP_BACKWARD", "description": "loop backward"}], "gui.EASING_INELASTIC": [{"body": "gui.EASING_INELASTIC", "prefix": "gui.EASING_INELASTIC", "description": "in-elastic"}], "render.STATE_POLYGON_OFFSET_FILL": [{"body": "render.STATE_POLYGON_OFFSET_FILL", "prefix": "render.STATE_POLYGON_OFFSET_FILL", "description": ""}], "gui.get_index(node)": [{"body": "gui.get_index(${1:node})", "prefix": "gui.get_index(node)", "description": "gets the index of the specified node"}], "sys.NETWORK_CONNECTED": [{"body": "sys.NETWORK_CONNECTED", "prefix": "sys.NETWORK_CONNECTED", "description": "network connected through other, non cellular, connection"}], "master:getsockname": [{"body": "master:getsockname()", "prefix": "master:getsockname", "description": "gets the local address information from master"}], "go.get(url, property)": [{"body": "go.get(${1:url}, ${2:property})", "prefix": "go.get(url, property)", "description": "gets a named property of the specified game object or component"}], "timer.cancel(handle)": [{"body": "timer.cancel(${1:handle})", "prefix": "timer.cancel(handle)", "description": "cancel a timer"}], "disable": [{"body": "msg.post(${1:receiver}, \"disable\")", "prefix": "disable", "description": "tells a collection proxy to disable the referenced collection"}, {"body": "msg.post(${1:receiver}, \"disable\")", "prefix": "disable", "description": "disables the receiving component"}], "model.get_go(url, bone_id)": [{"body": "model.get_go(${1:url}, ${2:bone_id})", "prefix": "model.get_go(url, bone_id)", "description": "retrieve the game object corresponding to a model skeleton bone"}], "render.BLEND_DST_COLOR": [{"body": "render.BLEND_DST_COLOR", "prefix": "render.BLEND_DST_COLOR", "description": ""}], "contact_point_response(position, normal, relative_velocity, distance, applied_impulse, life_time, mass, other_mass, other_id, other_position, other_group, own_group)": [{"body": "msg.post(${1:receiver}, \"contact_point_response\", ${2:{${3:position}, ${4:normal}, ${5:relative_velocity}, ${6:distance}, ${7:applied_impulse}, ${8:life_time}, ${9:mass}, ${10:other_mass}, ${11:other_id}, ${12:other_position}, ${13:other_group}, ${14:own_group}\\}})", "prefix": "contact_point_response(position, normal, relative_velocity, distance, applied_impulse, life_time, mass, other_mass, other_id, other_position, other_group, own_group)", "description": "reports a contact point between two collision objects"}], "render.disable_state(state)": [{"body": "render.disable_state(${1:state})", "prefix": "render.disable_state(state)", "description": "disables a render state"}], "gui.RESULT_OUT_OF_RESOURCES": [{"body": "gui.RESULT_OUT_OF_RESOURCES", "prefix": "gui.RESULT_OUT_OF_RESOURCES", "description": "out of resource"}], "on_reload(self)": [{"body": "on_reload(${1:self})", "prefix": "on_reload(self)", "description": "called when the script component is reloaded"}, {"body": "on_reload(${1:self})", "prefix": "on_reload(self)", "description": "called when the gui script is reloaded"}], "os.exit([code])": [{"body": "os.exit(${1:[code]})", "prefix": "os.exit([code])", "description": "attempts to terminate the process"}], "factory.STATUS_LOADED": [{"body": "factory.STATUS_LOADED", "prefix": "factory.STATUS_LOADED", "description": "loaded"}], "gui.EASING_INOUTEXPO": [{"body": "gui.EASING_INOUTEXPO", "prefix": "gui.EASING_INOUTEXPO", "description": "in-out-exponential"}], "outline": [{"body": "\"outline\"", "prefix": "outline", "description": "vector4 label outline"}], "resource.set_sound(path, buffer)": [{"body": "resource.set_sound(${1:path}, ${2:buffer})", "prefix": "resource.set_sound(path, buffer)", "description": "Update internal sound resource"}], "gui.EASING_OUTINCIRC": [{"body": "gui.EASING_OUTINCIRC", "prefix": "gui.EASING_OUTINCIRC", "description": "out-in-circlic"}], "physics.destroy_joint(collisionobject, joint_id)": [{"body": "physics.destroy_joint(${1:collisionobject}, ${2:joint_id})", "prefix": "physics.destroy_joint(collisionobject, joint_id)", "description": "destroy a physics joint"}], "linear_damping": [{"body": "\"linear_damping\"", "prefix": "linear_damping", "description": "number collision object linear damping"}], "gui.PROP_POSITION": [{"body": "gui.PROP_POSITION", "prefix": "gui.PROP_POSITION", "description": "position property"}], "set_update_frequency(frequency)": [{"body": "msg.post(${1:receiver}, \"set_update_frequency\", ${2:{${3:frequency}\\}})", "prefix": "set_update_frequency(frequency)", "description": "set update frequency"}], "connected:settimeout(value)": [{"body": "connected:settimeout(${1:value})", "prefix": "connected:settimeout(value)", "description": "sets the timeout value for the UDP socket"}], "resource.LIVEUPDATE_VERSION_MISMATCH": [{"body": "resource.LIVEUPDATE_VERSION_MISMATCH", "prefix": "resource.LIVEUPDATE_VERSION_MISMATCH", "description": "LIVEUPDATE_VERSION_MISMATCH"}], "factory.get_status([url])": [{"body": "factory.get_status(${1:[url]})", "prefix": "factory.get_status([url])", "description": "Get factory status"}], "gui.set_spine_playback_rate(node, playback_rate)": [{"body": "gui.set_spine_playback_rate(${1:node}, ${2:playback_rate})", "prefix": "gui.set_spine_playback_rate(node, playback_rate)", "description": "sets the playback rate of the animation on a spine node"}], "resource.get_buffer(path)": [{"body": "resource.get_buffer(${1:path})", "prefix": "resource.get_buffer(path)", "description": "get resource buffer"}], "print(...)": [{"body": "print(${1:...})", "prefix": "print(...)", "description": "prints its arguments"}], "proxy_loaded": [{"body": "msg.post(${1:receiver}, \"proxy_loaded\")", "prefix": "proxy_loaded", "description": "reports that a collection proxy has loaded its referenced collection"}], "io.tmpfile": [{"body": "io.tmpfile()", "prefix": "io.tmpfile", "description": "returns a handle to a temporary file"}], "render.BLEND_ONE": [{"body": "render.BLEND_ONE", "prefix": "render.BLEND_ONE", "description": ""}], "buffer.create(element_count, declaration)": [{"body": "buffer.create(${1:element_count}, ${2:declaration})", "prefix": "buffer.create(element_count, declaration)", "description": "creates a new buffer"}], "socket.connect(address, port, [locaddr], [locport], [family])": [{"body": "socket.connect(${1:address}, ${2:port}, ${3:[locaddr]}, ${4:[locport]}, ${5:[family]})", "prefix": "socket.connect(address, port, [locaddr], [locport], [family])", "description": "creates a new connected TCP client object"}], "unconnected:receivefrom([size])": [{"body": "unconnected:receivefrom(${1:[size]})", "prefix": "unconnected:receivefrom([size])", "description": "receives a datagram from the UDP socket"}], "math.min(x, ...)": [{"body": "math.min(${1:x}, ${2:...})", "prefix": "math.min(x, ...)", "description": "the lowest of one or more numbers"}], "coroutine.running": [{"body": "coroutine.running()", "prefix": "coroutine.running", "description": "returns the running coroutine"}], "model.play_anim(url, anim_id, playback, [play_properties], [complete_function])": [{"body": "model.play_anim(${1:url}, ${2:anim_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})", "prefix": "model.play_anim(url, anim_id, playback, [play_properties], [complete_function])", "description": "play an animation on a model"}], "go.EASING_OUTINEXPO": [{"body": "go.EASING_OUTINEXPO", "prefix": "go.EASING_OUTINEXPO", "description": "out-in-exponential"}], "go.EASING_INOUTEXPO": [{"body": "go.EASING_INOUTEXPO", "prefix": "go.EASING_INOUTEXPO", "description": "in-out-exponential"}], "_G": [{"body": "_G", "prefix": "_G", "description": "global variable that holds the global environment"}], "gui.set_adjust_mode(node, adjust_mode)": [{"body": "gui.set_adjust_mode(${1:node}, ${2:adjust_mode})", "prefix": "gui.set_adjust_mode(node, adjust_mode)", "description": "sets node adjust mode"}], "spine.get_go(url, bone_id)": [{"body": "spine.get_go(${1:url}, ${2:bone_id})", "prefix": "spine.get_go(url, bone_id)", "description": "retrieve the game object corresponding to a spine model skeleton bone"}], "particlefx.EMITTER_STATE_SLEEPING": [{"body": "particlefx.EMITTER_STATE_SLEEPING", "prefix": "particlefx.EMITTER_STATE_SLEEPING", "description": "sleeping state"}], "render.set_depth_func(func)": [{"body": "render.set_depth_func(${1:func})", "prefix": "render.set_depth_func(func)", "description": "sets the depth test function"}], "profiler.enable_ui(enabled)": [{"body": "profiler.enable_ui(${1:enabled})", "prefix": "profiler.enable_ui(enabled)", "description": "enables or disables the on-screen profiler ui"}], "go.get_scale([id])": [{"body": "go.get_scale(${1:[id]})", "prefix": "go.get_scale([id])", "description": "gets the 3D scale factor of the game object instance"}], "gui.cancel_spine(node)": [{"body": "gui.cancel_spine(${1:node})", "prefix": "gui.cancel_spine(node)", "description": "cancel a spine animation"}], "resource.LIVEUPDATE_INVALID_RESOURCE": [{"body": "resource.LIVEUPDATE_INVALID_RESOURCE", "prefix": "resource.LIVEUPDATE_INVALID_RESOURCE", "description": "LIVEUPDATE_INVALID_RESOURCE"}], "connected:close": [{"body": "connected:close()", "prefix": "connected:close", "description": "closes the UDP socket"}], "socket.udp": [{"body": "socket.udp()", "prefix": "socket.udp", "description": "creates a new IPv4 UDP object"}], "gui.cancel_flipbook(node)": [{"body": "gui.cancel_flipbook(${1:node})", "prefix": "gui.cancel_flipbook(node)", "description": "cancel a node flipbook animation"}], "physics.get_joint_reaction_force(collisionobject, joint_id)": [{"body": "physics.get_joint_reaction_force(${1:collisionobject}, ${2:joint_id})", "prefix": "physics.get_joint_reaction_force(collisionobject, joint_id)", "description": "get the reaction force for a joint"}], "debug.setupvalue(func, up, value)": [{"body": "debug.setupvalue(${1:func}, ${2:up}, ${3:value})", "prefix": "debug.setupvalue(func, up, value)", "description": "sets an upvalue for a function"}], "connected:send(datagram)": [{"body": "connected:send(${1:datagram})", "prefix": "connected:send(datagram)", "description": "sends a datagram through the connected UDP socket"}], "physics.set_gravity(gravity)": [{"body": "physics.set_gravity(${1:gravity})", "prefix": "physics.set_gravity(gravity)", "description": "set the gravity for collection"}], "material": [{"body": "\"material\"", "prefix": "material", "description": "hash label material"}, {"body": "\"material\"", "prefix": "material", "description": "hash model material"}, {"body": "\"material\"", "prefix": "material", "description": "hash sprite material"}, {"body": "\"material\"", "prefix": "material", "description": "hash spine material"}, {"body": "\"material\"", "prefix": "material", "description": "hash tile map material"}, {"body": "\"material\"", "prefix": "material", "description": "hash gui material"}], "table.remove(table, [pos])": [{"body": "table.remove(${1:table}, ${2:[pos]})", "prefix": "table.remove(table, [pos])", "description": "removes an item from a numerically-keyed table"}], "go.EASING_OUTCIRC": [{"body": "go.EASING_OUTCIRC", "prefix": "go.EASING_OUTCIRC", "description": "out-circlic"}], "master:bind(address, port)": [{"body": "master:bind(${1:address}, ${2:port})", "prefix": "master:bind(address, port)", "description": "binds a master object to address and port on the local host"}], "tilemap.get_tile(url, layer, x, y)": [{"body": "tilemap.get_tile(${1:url}, ${2:layer}, ${3:x}, ${4:y})", "prefix": "tilemap.get_tile(url, layer, x, y)", "description": "get a tile from a tile map"}], "image.TYPE_RGBA": [{"body": "image.TYPE_RGBA", "prefix": "image.TYPE_RGBA", "description": "RGBA image type"}], "bit.rol(x, n)": [{"body": "bit.rol(${1:x}, ${2:n})", "prefix": "bit.rol(x, n)", "description": "bitwise left rotation"}], "go.EASING_OUTINCIRC": [{"body": "go.EASING_OUTINCIRC", "prefix": "go.EASING_OUTINCIRC", "description": "out-in-circlic"}], "rotation": [{"body": "\"rotation\"", "prefix": "rotation", "description": "quaternion game object rotation"}], "profiler.MODE_SHOW_PEAK_FRAME": [{"body": "profiler.MODE_SHOW_PEAK_FRAME", "prefix": "profiler.MODE_SHOW_PEAK_FRAME", "description": "pause at peak frame"}], "gui.PROP_COLOR": [{"body": "gui.PROP_COLOR", "prefix": "gui.PROP_COLOR", "description": "color property"}], "DM_SERVICE_PORT": [{"body": "DM_SERVICE_PORT", "prefix": "DM_SERVICE_PORT", "description": "set the engine service port"}], "vmath.slerp(t, v1, v2)": [{"body": "vmath.slerp(${1:t}, ${2:v1}, ${3:v2})", "prefix": "vmath.slerp(t, v1, v2)", "description": "slerps between two vectors"}], "render.constant_buffer": [{"body": "render.constant_buffer()", "prefix": "render.constant_buffer", "description": "create a new constant buffer."}], "go.EASING_OUTEXPO": [{"body": "go.EASING_OUTEXPO", "prefix": "go.EASING_OUTEXPO", "description": "out-exponential"}], "vmath.ortho_inv(m1)": [{"body": "vmath.ortho_inv(${1:m1})", "prefix": "vmath.ortho_inv(m1)", "description": "calculates the inverse of an ortho-normal matrix."}], "vmath.lerp(t, q1, q2)": [{"body": "vmath.lerp(${1:t}, ${2:q1}, ${3:q2})", "prefix": "vmath.lerp(t, q1, q2)", "description": "lerps between two quaternions"}], "vmath.lerp(t, n1, n2)": [{"body": "vmath.lerp(${1:t}, ${2:n1}, ${3:n2})", "prefix": "vmath.lerp(t, n1, n2)", "description": "lerps between two numbers"}], "render.BLEND_SRC_ALPHA_SATURATE": [{"body": "render.BLEND_SRC_ALPHA_SATURATE", "prefix": "render.BLEND_SRC_ALPHA_SATURATE", "description": ""}], "ray_cast_missed(request_id)": [{"body": "msg.post(${1:receiver}, \"ray_cast_missed\", ${2:{${3:request_id}\\}})", "prefix": "ray_cast_missed(request_id)", "description": "reports a ray cast miss"}], "gui.get_perimeter_vertices(node)": [{"body": "gui.get_perimeter_vertices(${1:node})", "prefix": "gui.get_perimeter_vertices(node)", "description": "gets the number of generated vertices around the perimeter"}], "collision_response(other_id, other_position, other_group, own_group)": [{"body": "msg.post(${1:receiver}, \"collision_response\", ${2:{${3:other_id}, ${4:other_position}, ${5:other_group}, ${6:own_group}\\}})", "prefix": "collision_response(other_id, other_position, other_group, own_group)", "description": "reports a collision between two collision objects"}], "math.atan2(y, x)": [{"body": "math.atan2(${1:y}, ${2:x})", "prefix": "math.atan2(y, x)", "description": "arc tangent of v1/v2"}], "sys.get_connectivity": [{"body": "sys.get_connectivity()", "prefix": "sys.get_connectivity", "description": "get current network connectivity status"}], "go.set_scale(scale, [id])": [{"body": "go.set_scale(${1:scale}, ${2:[id]})", "prefix": "go.set_scale(scale, [id])", "description": "sets the scale factor of the game object instance"}], "window.get_size": [{"body": "window.get_size()", "prefix": "window.get_size", "description": "get the window size"}], "master:listen(backlog)": [{"body": "master:listen(${1:backlog})", "prefix": "master:listen(backlog)", "description": "makes the master socket listen for connections"}], "gui.ANCHOR_TOP": [{"body": "gui.ANCHOR_TOP", "prefix": "gui.ANCHOR_TOP", "description": "top y-anchor"}], "stop_record": [{"body": "msg.post(${1:receiver}, \"stop_record\")", "prefix": "stop_record", "description": "stop current video recording"}], "client:send(data, [i], [j])": [{"body": "client:send(${1:data}, ${2:[i]}, ${3:[j]})", "prefix": "client:send(data, [i], [j])", "description": "sends data through client socket"}], "vmath.vector(t)": [{"body": "vmath.vector(${1:t})", "prefix": "vmath.vector(t)", "description": "create a new vector from a table of values"}], "go.EASING_INOUTBOUNCE": [{"body": "go.EASING_INOUTBOUNCE", "prefix": "go.EASING_INOUTBOUNCE", "description": "in-out-bounce"}], "go.EASING_INOUTCUBIC": [{"body": "go.EASING_INOUTCUBIC", "prefix": "go.EASING_INOUTCUBIC", "description": "in-out-cubic"}], "profiler.set_ui_mode(mode)": [{"body": "profiler.set_ui_mode(${1:mode})", "prefix": "profiler.set_ui_mode(mode)", "description": "sets the the on-screen profiler ui mode"}], "server:getstats": [{"body": "server:getstats()", "prefix": "server:getstats", "description": "gets accounting information on the socket"}], "resource.LIVEUPDATE_FORMAT_ERROR": [{"body": "resource.LIVEUPDATE_FORMAT_ERROR", "prefix": "resource.LIVEUPDATE_FORMAT_ERROR", "description": "LIVEUPDATE_FORMAT_ERROR"}], "gui.get_size(node)": [{"body": "gui.get_size(${1:node})", "prefix": "gui.get_size(node)", "description": "gets the node size"}], "profiler.MODE_RUN": [{"body": "profiler.MODE_RUN", "prefix": "profiler.MODE_RUN", "description": "continously show latest frame"}], "gui.PROP_ROTATION": [{"body": "gui.PROP_ROTATION", "prefix": "gui.PROP_ROTATION", "description": "rotation property"}], "go.set(url, property, value)": [{"body": "go.set(${1:url}, ${2:property}, ${3:value})", "prefix": "go.set(url, property, value)", "description": "sets a named property of the specified game object or component, or a material constant"}], "crash.write_dump": [{"body": "crash.write_dump()", "prefix": "crash.write_dump", "description": "writes crash dump"}], "bit.lshift(x, n)": [{"body": "bit.lshift(${1:x}, ${2:n})", "prefix": "bit.lshift(x, n)", "description": "bitwise logical left-shift"}], "ipairs(t)": [{"body": "ipairs(${1:t})", "prefix": "ipairs(t)", "description": "iterates over a numerically keyed table"}], "gui.get_yanchor(node)": [{"body": "gui.get_yanchor(${1:node})", "prefix": "gui.get_yanchor(node)", "description": "gets the y-anchor of a node"}], "json.decode(json)": [{"body": "json.decode(${1:json})", "prefix": "json.decode(json)", "description": "decode JSON from a string to a lua-table"}], "go.PLAYBACK_LOOP_PINGPONG": [{"body": "go.PLAYBACK_LOOP_PINGPONG", "prefix": "go.PLAYBACK_LOOP_PINGPONG", "description": "ping pong loop"}], "go.PLAYBACK_ONCE_BACKWARD": [{"body": "go.PLAYBACK_ONCE_BACKWARD", "prefix": "go.PLAYBACK_ONCE_BACKWARD", "description": "once backward"}], "size": [{"body": "\"size\"", "prefix": "size", "description": "vector3 label size"}, {"body": "\"size\"", "prefix": "size", "description": "vector3 sprite size"}], "sprite.play_flipbook(url, id, [complete_function], [play_properties])": [{"body": "sprite.play_flipbook(${1:url}, ${2:id}, ${3:[complete_function]}, ${4:[play_properties]})", "prefix": "sprite.play_flipbook(url, id, [complete_function], [play_properties])", "description": "Play an animation on a sprite component"}], "render.COMPARE_FUNC_GREATER": [{"body": "render.COMPARE_FUNC_GREATER", "prefix": "render.COMPARE_FUNC_GREATER", "description": ""}], "toggle_physics_debug": [{"body": "msg.post(${1:receiver}, \"toggle_physics_debug\")", "prefix": "toggle_physics_debug", "description": "shows/hides the on-screen physics visual debugging"}], "model.cancel(url)": [{"body": "model.cancel(${1:url})", "prefix": "model.cancel(url)", "description": "cancel all animation on a model"}], "gui.get_fill_angle(node)": [{"body": "gui.get_fill_angle(${1:node})", "prefix": "gui.get_fill_angle(node)", "description": "gets the angle for the filled pie sector"}], "angular_damping": [{"body": "\"angular_damping\"", "prefix": "angular_damping", "description": "number collision object angular damping"}], "gui.get_slice9(node)": [{"body": "gui.get_slice9(${1:node})", "prefix": "gui.get_slice9(node)", "description": "get the slice9 values for the node"}], "bit.bswap(x)": [{"body": "bit.bswap(${1:x})", "prefix": "bit.bswap(x)", "description": "bitwise swap"}], "coroutine.create(f)": [{"body": "coroutine.create(${1:f})", "prefix": "coroutine.create(f)", "description": "creates a new coroutine thread"}], "buffer.VALUE_TYPE_FLOAT32": [{"body": "buffer.VALUE_TYPE_FLOAT32", "prefix": "buffer.VALUE_TYPE_FLOAT32", "description": "float32"}], "physics.set_vflip(url, flip)": [{"body": "physics.set_vflip(${1:url}, ${2:flip})", "prefix": "physics.set_vflip(url, flip)", "description": "flip the geometry vertically for a collision object"}], "render.WRAP_REPEAT": [{"body": "render.WRAP_REPEAT", "prefix": "render.WRAP_REPEAT", "description": ""}], "render.BLEND_ONE_MINUS_DST_COLOR": [{"body": "render.BLEND_ONE_MINUS_DST_COLOR", "prefix": "render.BLEND_ONE_MINUS_DST_COLOR", "description": ""}], "vmath.slerp(t, q1, q2)": [{"body": "vmath.slerp(${1:t}, ${2:q1}, ${3:q2})", "prefix": "vmath.slerp(t, q1, q2)", "description": "slerps between two quaternions"}], "buffer.VALUE_TYPE_UINT32": [{"body": "buffer.VALUE_TYPE_UINT32", "prefix": "buffer.VALUE_TYPE_UINT32", "description": "uint32"}], "coroutine.yield(...)": [{"body": "coroutine.yield(${1:...})", "prefix": "coroutine.yield(...)", "description": "yields execution of thread back to the caller"}], "socket.dns.getaddrinfo(address)": [{"body": "socket.dns.getaddrinfo(${1:address})", "prefix": "socket.dns.getaddrinfo(address)", "description": "resolve to IPv4 or IPv6 address"}], "sound.is_music_playing": [{"body": "sound.is_music_playing()", "prefix": "sound.is_music_playing", "description": "check if background music is playing"}], "sound.get_group_gain(group)": [{"body": "sound.get_group_gain(${1:group})", "prefix": "sound.get_group_gain(group)", "description": "get mixer group gain"}], "bit.arshift(x, n)": [{"body": "bit.arshift(${1:x}, ${2:n})", "prefix": "bit.arshift(x, n)", "description": "bitwise arithmetic right-shift"}], "gui.new_spine_node(pos, spine_scene)": [{"body": "gui.new_spine_node(${1:pos}, ${2:spine_scene})", "prefix": "gui.new_spine_node(pos, spine_scene)", "description": "creates a new spine node"}], "render.BLEND_CONSTANT_ALPHA": [{"body": "render.BLEND_CONSTANT_ALPHA", "prefix": "render.BLEND_CONSTANT_ALPHA", "description": ""}], "go.EASING_OUTBACK": [{"body": "go.EASING_OUTBACK", "prefix": "go.EASING_OUTBACK", "description": "out-back"}], "physics.wakeup(url)": [{"body": "physics.wakeup(${1:url})", "prefix": "physics.wakeup(url)", "description": "explicitly wakeup a collision object"}], "gui.get_id(node)": [{"body": "gui.get_id(${1:node})", "prefix": "gui.get_id(node)", "description": "gets the id of the specified node"}], "go.EASING_INCIRC": [{"body": "go.EASING_INCIRC", "prefix": "go.EASING_INCIRC", "description": "in-circlic"}], "client:getpeername": [{"body": "client:getpeername()", "prefix": "client:getpeername", "description": "gets information about a client's peer"}], "sound.get_peak(group, window)": [{"body": "sound.get_peak(${1:group}, ${2:window})", "prefix": "sound.get_peak(group, window)", "description": "get peak gain value from mixer group"}], "crash.release(handle)": [{"body": "crash.release(${1:handle})", "prefix": "crash.release(handle)", "description": "releases a previously loaded crash dump"}], "gui.KEYBOARD_TYPE_PASSWORD": [{"body": "gui.KEYBOARD_TYPE_PASSWORD", "prefix": "gui.KEYBOARD_TYPE_PASSWORD", "description": "password keyboard"}], "gui.EASING_OUTQUAD": [{"body": "gui.EASING_OUTQUAD", "prefix": "gui.EASING_OUTQUAD", "description": "out-quadratic"}], "gui.set_pivot(node, pivot)": [{"body": "gui.set_pivot(${1:node}, ${2:pivot})", "prefix": "gui.set_pivot(node, pivot)", "description": "sets the pivot of a node"}], "table.sort(table, [comp])": [{"body": "table.sort(${1:table}, ${2:[comp]})", "prefix": "table.sort(table, [comp])", "description": "Sorts a table"}], "DM_LOG_PORT": [{"body": "DM_LOG_PORT", "prefix": "DM_LOG_PORT", "description": "sets the logging port"}], "set_vsync(swap_interval)": [{"body": "msg.post(${1:receiver}, \"set_vsync\", ${2:{${3:swap_interval}\\}})", "prefix": "set_vsync(swap_interval)", "description": "set vsync swap interval"}], "socket.protect(func)": [{"body": "socket.protect(${1:func})", "prefix": "socket.protect(func)", "description": "converts a function that throws exceptions into a safe function"}], "socket.dns.toip(address)": [{"body": "socket.dns.toip(${1:address})", "prefix": "socket.dns.toip(address)", "description": "resolve to IPv4 address"}], "gui.set_blend_mode(node, blend_mode)": [{"body": "gui.set_blend_mode(${1:node}, ${2:blend_mode})", "prefix": "gui.set_blend_mode(node, blend_mode)", "description": "sets node blend mode"}], "math.floor(x)": [{"body": "math.floor(${1:x})", "prefix": "math.floor(x)", "description": "next smaller integer value"}], "math.sinh(x)": [{"body": "math.sinh(${1:x})", "prefix": "math.sinh(x)", "description": "hyperbolic sine"}], "io.read(...)": [{"body": "io.read(${1:...})", "prefix": "io.read(...)", "description": "reads from the default input file"}], "render.set_depth_mask(depth)": [{"body": "render.set_depth_mask(${1:depth})", "prefix": "render.set_depth_mask(depth)", "description": "sets the depth mask"}], "sys.get_save_file(application_id, file_name)": [{"body": "sys.get_save_file(${1:application_id}, ${2:file_name})", "prefix": "sys.get_save_file(application_id, file_name)", "description": "gets the save-file path"}], "sound.is_phone_call_active": [{"body": "sound.is_phone_call_active()", "prefix": "sound.is_phone_call_active", "description": "check if a phone call is active"}], "gui.EASING_OUTEXPO": [{"body": "gui.EASING_OUTEXPO", "prefix": "gui.EASING_OUTEXPO", "description": "out-exponential"}], "socket.dns.tohostname(address)": [{"body": "socket.dns.tohostname(${1:address})", "prefix": "socket.dns.tohostname(address)", "description": "resolve to host name (IPv4)"}], "sound.set_pan(url, [pan])": [{"body": "sound.set_pan(${1:url}, ${2:[pan]})", "prefix": "sound.set_pan(url, [pan])", "description": "set sound pan"}], "getfenv([f])": [{"body": "getfenv(${1:[f]})", "prefix": "getfenv([f])", "description": "returns the current environment table"}], "go.EASING_OUTQUART": [{"body": "go.EASING_OUTQUART", "prefix": "go.EASING_OUTQUART", "description": "out-quartic"}], "os.date([format], [time])": [{"body": "os.date(${1:[format]}, ${2:[time]})", "prefix": "os.date([format], [time])", "description": "formats a date/time string"}], "socket.select(recvt, sendt, [timeout])": [{"body": "socket.select(${1:recvt}, ${2:sendt}, ${3:[timeout]})", "prefix": "socket.select(recvt, sendt, [timeout])", "description": "waits for a number of sockets to change status"}], "gui.get_text(node)": [{"body": "gui.get_text(${1:node})", "prefix": "gui.get_text(node)", "description": "gets the node text"}], "resource.tile_source([path])": [{"body": "resource.tile_source(${1:[path]})", "prefix": "resource.tile_source([path])", "description": "reference to tile source resource"}], "render.FILTER_NEAREST": [{"body": "render.FILTER_NEAREST", "prefix": "render.FILTER_NEAREST", "description": ""}], "buffer.copy_stream(dst, dstoffset, src, srcoffset, count)": [{"body": "buffer.copy_stream(${1:dst}, ${2:dstoffset}, ${3:src}, ${4:srcoffset}, ${5:count})", "prefix": "buffer.copy_stream(dst, dstoffset, src, srcoffset, count)", "description": "copies data from one stream to another"}], "particlefx.reset_constant(url, emitter, constant)": [{"body": "particlefx.reset_constant(${1:url}, ${2:emitter}, ${3:constant})", "prefix": "particlefx.reset_constant(url, emitter, constant)", "description": "reset a shader constant for a particle FX component emitter"}], "angular_velocity": [{"body": "\"angular_velocity\"", "prefix": "angular_velocity", "description": "vector3 collision object angular velocity"}], "final": [{"body": "msg.post(${1:receiver}, \"final\")", "prefix": "final", "description": "tells a collection proxy to finalize the referenced collection"}], "render.get_render_target_width(render_target, buffer_type)": [{"body": "render.get_render_target_width(${1:render_target}, ${2:buffer_type})", "prefix": "render.get_render_target_width(render_target, buffer_type)", "description": "retrieve the buffer width from a render target"}], "string.match(s, pattern, [init])": [{"body": "string.match(${1:s}, ${2:pattern}, ${3:[init]})", "prefix": "string.match(s, pattern, [init])", "description": "searches a string for a pattern"}], "file:seek([whence], [offset])": [{"body": "file:seek(${1:[whence]}, ${2:[offset]})", "prefix": "file:seek([whence], [offset])", "description": "sets and gets the current file position"}], "socket._VERSION": [{"body": "socket._VERSION", "prefix": "socket._VERSION", "description": "the current LuaSocket version"}], "vmath.matrix4_axis_angle(v, angle)": [{"body": "vmath.matrix4_axis_angle(${1:v}, ${2:angle})", "prefix": "vmath.matrix4_axis_angle(v, angle)", "description": "creates a matrix from an axis and an angle"}], "file:lines": [{"body": "file:lines()", "prefix": "file:lines", "description": "returns an iterator function for reading the file line-by-line"}], "gui.ADJUST_FIT": [{"body": "gui.ADJUST_FIT", "prefix": "gui.ADJUST_FIT", "description": "fit adjust mode"}], "render.BLEND_ONE_MINUS_SRC_ALPHA": [{"body": "render.BLEND_ONE_MINUS_SRC_ALPHA", "prefix": "render.BLEND_ONE_MINUS_SRC_ALPHA", "description": ""}], "http.request(url, method, callback, [headers], [post_data], [options])": [{"body": "http.request(${1:url}, ${2:method}, ${3:callback}, ${4:[headers]}, ${5:[post_data]}, ${6:[options]})", "prefix": "http.request(url, method, callback, [headers], [post_data], [options])", "description": "perform a HTTP/HTTPS request"}], "go.PLAYBACK_ONCE_FORWARD": [{"body": "go.PLAYBACK_ONCE_FORWARD", "prefix": "go.PLAYBACK_ONCE_FORWARD", "description": "once forward"}], "math.random([m], [n])": [{"body": "math.random(${1:[m]}, ${2:[n]})", "prefix": "math.random([m], [n])", "description": "generate a random number"}], "go.EASING_INOUTSINE": [{"body": "go.EASING_INOUTSINE", "prefix": "go.EASING_INOUTSINE", "description": "in-out-sine"}], "gui.get_parent(node)": [{"body": "gui.get_parent(${1:node})", "prefix": "gui.get_parent(node)", "description": "gets the parent of the specified node"}], "string.gmatch(s, pattern)": [{"body": "string.gmatch(${1:s}, ${2:pattern})", "prefix": "string.gmatch(s, pattern)", "description": "iterate over a string"}], "string.dump(function)": [{"body": "string.dump(${1:function})", "prefix": "string.dump(function)", "description": "converts a function into binary"}], "gui.get_spine_playback_rate(node)": [{"body": "gui.get_spine_playback_rate(${1:node})", "prefix": "gui.get_spine_playback_rate(node)", "description": "gets the playback rate of the animation on a spine node"}], "gui.set_spine_scene(node, spine_scene)": [{"body": "gui.set_spine_scene(${1:node}, ${2:spine_scene})", "prefix": "gui.set_spine_scene(node, spine_scene)", "description": "sets the spine scene of a node"}], "gui.PROP_OUTLINE": [{"body": "gui.PROP_OUTLINE", "prefix": "gui.PROP_OUTLINE", "description": "outline color property"}], "math.cos(x)": [{"body": "math.cos(${1:x})", "prefix": "math.cos(x)", "description": "cosine"}], "gui.get_text_metrics_from_node(node)": [{"body": "gui.get_text_metrics_from_node(${1:node})", "prefix": "gui.get_text_metrics_from_node(node)", "description": "get text metrics from node"}], "gui.get_width": [{"body": "gui.get_width()", "prefix": "gui.get_width", "description": "gets the scene width"}], "io.close([file])": [{"body": "io.close(${1:[file]})", "prefix": "io.close([file])", "description": "closes a file"}], "render.COMPARE_FUNC_NEVER": [{"body": "render.COMPARE_FUNC_NEVER", "prefix": "render.COMPARE_FUNC_NEVER", "description": ""}], "gui.set_color(node, color)": [{"body": "gui.set_color(${1:node}, ${2:color})", "prefix": "gui.set_color(node, color)", "description": "sets the node color"}], "os.tmpname": [{"body": "os.tmpname()", "prefix": "os.tmpname", "description": "returns a name for a temporary file"}], "resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH": [{"body": "resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH", "prefix": "resource.LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH", "description": "LIVEUPDATE_BUNDLED_RESOURCE_MISMATCH"}], "window.WINDOW_EVENT_FOCUS_GAINED": [{"body": "window.WINDOW_EVENT_FOCUS_GAINED", "prefix": "window.WINDOW_EVENT_FOCUS_GAINED", "description": "focus gained window event"}], "gui.get_spine_animation(node)": [{"body": "gui.get_spine_animation(${1:node})", "prefix": "gui.get_spine_animation(node)", "description": "gets the playing animation on a spine node"}], "resource.material([path])": [{"body": "resource.material(${1:[path]})", "prefix": "resource.material([path])", "description": "reference to material resource"}], "gui.reset_nodes": [{"body": "gui.reset_nodes()", "prefix": "gui.reset_nodes", "description": "resets all nodes to initial state"}], "vmath.quat_axis_angle(v, angle)": [{"body": "vmath.quat_axis_angle(${1:v}, ${2:angle})", "prefix": "vmath.quat_axis_angle(v, angle)", "description": "creates a quaternion to rotate around a unit vector"}], "package.seeall(module)": [{"body": "package.seeall(${1:module})", "prefix": "package.seeall(module)", "description": "sets a metatable for the module so it can see global variables"}], "coroutine.resume(co, [val1], [...])": [{"body": "coroutine.resume(${1:co}, ${2:[val1]}, ${3:[...]})", "prefix": "coroutine.resume(co, [val1], [...])", "description": "start or resume a thread"}], "gui.PROP_INNER_RADIUS": [{"body": "gui.PROP_INNER_RADIUS", "prefix": "gui.PROP_INNER_RADIUS", "description": "inner_radius property"}], "go.EASING_OUTELASTIC": [{"body": "go.EASING_OUTELASTIC", "prefix": "go.EASING_OUTELASTIC", "description": "out-elastic"}], "connected:setpeername(\"*\")": [{"body": "connected:setpeername(${1:\"*\"})", "prefix": "connected:setpeername(\"*\")", "description": "remove the peer of the connected UDP socket"}], "image.TYPE_LUMINANCE": [{"body": "image.TYPE_LUMINANCE", "prefix": "image.TYPE_LUMINANCE", "description": "luminance image type"}], "gui.set_size_mode(node, size_mode)": [{"body": "gui.set_size_mode(${1:node}, ${2:size_mode})", "prefix": "gui.set_size_mode(node, size_mode)", "description": "sets node size mode"}], "sys.get_engine_info": [{"body": "sys.get_engine_info()", "prefix": "sys.get_engine_info", "description": "get engine information"}], "window.set_dim_mode(mode)": [{"body": "window.set_dim_mode(${1:mode})", "prefix": "window.set_dim_mode(mode)", "description": "set the mode for screen dimming"}], "gui.set_scale(node, scale)": [{"body": "gui.set_scale(${1:node}, ${2:scale})", "prefix": "gui.set_scale(node, scale)", "description": "sets the node scale"}], "acquire_input_focus": [{"body": "msg.post(${1:receiver}, \"acquire_input_focus\")", "prefix": "acquire_input_focus", "description": "acquires the user input focus"}], "gui.EASING_INOUTQUART": [{"body": "gui.EASING_INOUTQUART", "prefix": "gui.EASING_INOUTQUART", "description": "in-out-quartic"}], "collectionfactory.get_status([url])": [{"body": "collectionfactory.get_status(${1:[url]})", "prefix": "collectionfactory.get_status([url])", "description": "Get collection factory status"}], "master:connect(address, port)": [{"body": "master:connect(${1:address}, ${2:port})", "prefix": "master:connect(address, port)", "description": "connects a master object to a remote host"}], "vmath.quat_rotation_y(angle)": [{"body": "vmath.quat_rotation_y(${1:angle})", "prefix": "vmath.quat_rotation_y(angle)", "description": "creates a quaternion from rotation around y-axis"}], "resource.buffer([path])": [{"body": "resource.buffer(${1:[path]})", "prefix": "resource.buffer([path])", "description": "reference to buffer resource"}], "os.time([table])": [{"body": "os.time(${1:[table]})", "prefix": "os.time([table])", "description": "returns the current time or calculates the time in seconds from a table"}], "render.FORMAT_LUMINANCE": [{"body": "render.FORMAT_LUMINANCE", "prefix": "render.FORMAT_LUMINANCE", "description": ""}], "reboot(arg1, arg2, arg3, arg4, arg5, arg6)": [{"body": "msg.post(${1:receiver}, \"reboot\", ${2:{${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6}\\}})", "prefix": "reboot(arg1, arg2, arg3, arg4, arg5, arg6)", "description": "reboot engine with arguments"}], "client:setstats(received, sent, age)": [{"body": "client:setstats(${1:received}, ${2:sent}, ${3:age})", "prefix": "client:setstats(received, sent, age)", "description": "resets accounting information on the socket"}], "crash.get_modules(handle)": [{"body": "crash.get_modules(${1:handle})", "prefix": "crash.get_modules(handle)", "description": "get all loaded modules from when the crash occured"}], "gui.new_particlefx_node(pos, particlefx)": [{"body": "gui.new_particlefx_node(${1:pos}, ${2:particlefx})", "prefix": "gui.new_particlefx_node(pos, particlefx)", "description": "creates a new particle fx node"}], "resource.LIVEUPDATE_SCHEME_MISMATCH": [{"body": "resource.LIVEUPDATE_SCHEME_MISMATCH", "prefix": "resource.LIVEUPDATE_SCHEME_MISMATCH", "description": "LIVEUPDATE_SCHEME_MISMATCH"}], "loadfile([filename])": [{"body": "loadfile(${1:[filename]})", "prefix": "loadfile([filename])", "description": "loads a Lua file and parses it"}], "string.sub(s, i, [j])": [{"body": "string.sub(${1:s}, ${2:i}, ${3:[j]})", "prefix": "string.sub(s, i, [j])", "description": "returns a substring of a string"}], "animation": [{"body": "\"animation\"", "prefix": "animation", "description": "hash model animation"}, {"body": "\"animation\"", "prefix": "animation", "description": "hash spine animation"}], "render.COMPARE_FUNC_NOTEQUAL": [{"body": "render.COMPARE_FUNC_NOTEQUAL", "prefix": "render.COMPARE_FUNC_NOTEQUAL", "description": ""}], "tilemap.get_bounds(url)": [{"body": "tilemap.get_bounds(${1:url})", "prefix": "tilemap.get_bounds(url)", "description": "get the bounds of a tile map"}], "profiler.get_memory_usage": [{"body": "profiler.get_memory_usage()", "prefix": "profiler.get_memory_usage", "description": "get current memory usage for app reported by OS"}], "math.pi": [{"body": "math.pi", "prefix": "math.pi", "description": "the value of pi"}], "coroutine.status(co)": [{"body": "coroutine.status(${1:co})", "prefix": "coroutine.status(co)", "description": "returns the status of a thread"}], "render.BUFFER_COLOR_BIT": [{"body": "render.BUFFER_COLOR_BIT", "prefix": "render.BUFFER_COLOR_BIT", "description": ""}], "render.FACE_BACK": [{"body": "render.FACE_BACK", "prefix": "render.FACE_BACK", "description": ""}], "gui.EASING_OUTINQUAD": [{"body": "gui.EASING_OUTINQUAD", "prefix": "gui.EASING_OUTINQUAD", "description": "out-in-quadratic"}], "render.STENCIL_OP_INCR": [{"body": "render.STENCIL_OP_INCR", "prefix": "render.STENCIL_OP_INCR", "description": ""}], "debug.sethook([thread], hook, mask, [count])": [{"body": "debug.sethook(${1:[thread]}, ${2:hook}, ${3:mask}, ${4:[count]})", "prefix": "debug.sethook([thread], hook, mask, [count])", "description": "sets a debug hook function"}], "window.WINDOW_EVENT_DEICONIFIED": [{"body": "window.WINDOW_EVENT_DEICONIFIED", "prefix": "window.WINDOW_EVENT_DEICONIFIED", "description": "deiconified window event"}], "math.cosh(x)": [{"body": "math.cosh(${1:x})", "prefix": "math.cosh(x)", "description": "hyperbolic cosine"}], "physics.get_joint_properties(collisionobject, joint_id)": [{"body": "physics.get_joint_properties(${1:collisionobject}, ${2:joint_id})", "prefix": "physics.get_joint_properties(collisionobject, joint_id)", "description": "get properties for a joint"}], "go.EASING_INOUTQUAD": [{"body": "go.EASING_INOUTQUAD", "prefix": "go.EASING_INOUTQUAD", "description": "in-out-quadratic"}], "debug.gethook([thread])": [{"body": "debug.gethook(${1:[thread]})", "prefix": "debug.gethook([thread])", "description": "returns the current hook settings"}], "sys.load_resource(filename)": [{"body": "sys.load_resource(${1:filename})", "prefix": "sys.load_resource(filename)", "description": "loads resource from game data"}], "window_resized(height, width)": [{"body": "msg.post(${1:receiver}, \"window_resized\", ${2:{${3:height}, ${4:width}\\}})", "prefix": "window_resized(height, width)", "description": "reports a window size change"}], "gui.RESULT_DATA_ERROR": [{"body": "gui.RESULT_DATA_ERROR", "prefix": "gui.RESULT_DATA_ERROR", "description": "data error"}], "file:flush": [{"body": "file:flush()", "prefix": "file:flush", "description": "flushes outstanding data to disk"}], "render.render_target(name, parameters)": [{"body": "render.render_target(${1:name}, ${2:parameters})", "prefix": "render.render_target(name, parameters)", "description": "creates a new render target"}], "crash.get_sys_field(handle, index)": [{"body": "crash.get_sys_field(${1:handle}, ${2:index})", "prefix": "crash.get_sys_field(handle, index)", "description": "reads a system field from a loaded crash dump"}], "package.loaders": [{"body": "package.loaders()", "prefix": "package.loaders", "description": "table of package loaders"}], "gui.set_slice9(node, values)": [{"body": "gui.set_slice9(${1:node}, ${2:values})", "prefix": "gui.set_slice9(node, values)", "description": "set the slice9 configuration for the node"}], "go.EASING_OUTINSINE": [{"body": "go.EASING_OUTINSINE", "prefix": "go.EASING_OUTINSINE", "description": "out-in-sine"}], "gui.EASING_OUTINSINE": [{"body": "gui.EASING_OUTINSINE", "prefix": "gui.EASING_OUTINSINE", "description": "out-in-sine"}], "gui.get_leading(node)": [{"body": "gui.get_leading(${1:node})", "prefix": "gui.get_leading(node)", "description": "gets the leading of the text node"}], "profiler.VIEW_MODE_MINIMIZED": [{"body": "profiler.VIEW_MODE_MINIMIZED", "prefix": "profiler.VIEW_MODE_MINIMIZED", "description": "show mimimal profiler ui"}], "debug.getfenv(o)": [{"body": "debug.getfenv(${1:o})", "prefix": "debug.getfenv(o)", "description": "returns the environment of an object"}], "math.deg(x)": [{"body": "math.deg(${1:x})", "prefix": "math.deg(x)", "description": "convert from radians to degrees"}], "vmath.matrix4_perspective(fov, aspect, near, far)": [{"body": "vmath.matrix4_perspective(${1:fov}, ${2:aspect}, ${3:near}, ${4:far})", "prefix": "vmath.matrix4_perspective(fov, aspect, near, far)", "description": "creates a perspective projection matrix"}], "debug.getinfo([thread], function, [what])": [{"body": "debug.getinfo(${1:[thread]}, ${2:function}, ${3:[what]})", "prefix": "debug.getinfo([thread], function, [what])", "description": "returns a table with information about a function"}], "sound.play(url, [play_properties], [complete_function])": [{"body": "sound.play(${1:url}, ${2:[play_properties]}, ${3:[complete_function]})", "prefix": "sound.play(url, [play_properties], [complete_function])", "description": "plays a sound"}], "sprite.set_hflip(url, flip)": [{"body": "sprite.set_hflip(${1:url}, ${2:flip})", "prefix": "sprite.set_hflip(url, flip)", "description": "set horizontal flipping on a sprite's animations"}], "gui.new_box_node(pos, size)": [{"body": "gui.new_box_node(${1:pos}, ${2:size})", "prefix": "gui.new_box_node(pos, size)", "description": "creates a new box node"}], "sound.get_group_name(group)": [{"body": "sound.get_group_name(${1:group})", "prefix": "sound.get_group_name(group)", "description": "get mixer group name string"}], "zlib.deflate(buf)": [{"body": "zlib.deflate(${1:buf})", "prefix": "zlib.deflate(buf)", "description": "Deflate (compress) a buffer"}], "set_gain([gain])": [{"body": "msg.post(${1:receiver}, \"set_gain\", ${2:{${3:[gain]}\\}})", "prefix": "set_gain([gain])", "description": "set sound gain"}], "gui.KEYBOARD_TYPE_EMAIL": [{"body": "gui.KEYBOARD_TYPE_EMAIL", "prefix": "gui.KEYBOARD_TYPE_EMAIL", "description": "email keyboard"}], "go.get_rotation([id])": [{"body": "go.get_rotation(${1:[id]})", "prefix": "go.get_rotation([id])", "description": "gets the rotation of the game object instance"}], "render.get_window_height": [{"body": "render.get_window_height()", "prefix": "render.get_window_height", "description": "gets the actual window height"}], "gui.get_spine_cursor(node)": [{"body": "gui.get_spine_cursor(${1:node})", "prefix": "gui.get_spine_cursor(node)", "description": "gets the normalized cursor of the animation on a spine node"}], "spine.cancel(url)": [{"body": "spine.cancel(${1:url})", "prefix": "spine.cancel(url)", "description": "cancel all animation on a spine model"}], "connected:getoption(option)": [{"body": "connected:getoption(${1:option})", "prefix": "connected:getoption(option)", "description": "gets options for the UDP socket"}], "gui.EASING_INOUTQUAD": [{"body": "gui.EASING_INOUTQUAD", "prefix": "gui.EASING_INOUTQUAD", "description": "in-out-quadratic"}], "gui.PIVOT_NE": [{"body": "gui.PIVOT_NE", "prefix": "gui.PIVOT_NE", "description": "north-east pivot"}], "render.set_render_target_size(render_target, width, height)": [{"body": "render.set_render_target_size(${1:render_target}, ${2:width}, ${3:height})", "prefix": "render.set_render_target_size(render_target, width, height)", "description": "sets the render target size"}], "file:setvbuf(mode, [size])": [{"body": "file:setvbuf(${1:mode}, ${2:[size]})", "prefix": "file:setvbuf(mode, [size])", "description": "sets the buffering mode for an output file"}], "render.get_width": [{"body": "render.get_width()", "prefix": "render.get_width", "description": "gets the window width, as specified for the project"}], "image.TYPE_RGB": [{"body": "image.TYPE_RGB", "prefix": "image.TYPE_RGB", "description": "RGB image type"}], "collectionfactory.unload([url])": [{"body": "collectionfactory.unload(${1:[url]})", "prefix": "collectionfactory.unload([url])", "description": "Unload resources previously loaded using collectionfactory.load"}], "gui.PROP_FILL_ANGLE": [{"body": "gui.PROP_FILL_ANGLE", "prefix": "gui.PROP_FILL_ANGLE", "description": "fill_angle property"}], "string.lower(s)": [{"body": "string.lower(${1:s})", "prefix": "string.lower(s)", "description": "converts a string to lower-case"}], "buffer.VALUE_TYPE_INT32": [{"body": "buffer.VALUE_TYPE_INT32", "prefix": "buffer.VALUE_TYPE_INT32", "description": "int32"}], "sys.get_ifaddrs": [{"body": "sys.get_ifaddrs()", "prefix": "sys.get_ifaddrs", "description": "enumerate network interfaces"}], "font": [{"body": "\"font\"", "prefix": "font", "description": "hash label font"}], "render.BLEND_SRC_COLOR": [{"body": "render.BLEND_SRC_COLOR", "prefix": "render.BLEND_SRC_COLOR", "description": ""}], "gui.EASING_OUTELASTIC": [{"body": "gui.EASING_OUTELASTIC", "prefix": "gui.EASING_OUTELASTIC", "description": "out-elastic"}], "profiler.get_cpu_usage": [{"body": "profiler.get_cpu_usage()", "prefix": "profiler.get_cpu_usage", "description": "get current CPU usage for app reported by OS"}], "collectionfactory.STATUS_LOADED": [{"body": "collectionfactory.STATUS_LOADED", "prefix": "collectionfactory.STATUS_LOADED", "description": "loaded"}], "profiler.MODE_RECORD": [{"body": "profiler.MODE_RECORD", "prefix": "profiler.MODE_RECORD", "description": "start recording"}], "go.PLAYBACK_LOOP_BACKWARD": [{"body": "go.PLAYBACK_LOOP_BACKWARD", "prefix": "go.PLAYBACK_LOOP_BACKWARD", "description": "loop backward"}], "render.FORMAT_RGBA": [{"body": "render.FORMAT_RGBA", "prefix": "render.FORMAT_RGBA", "description": ""}], "gui.get_layer(node)": [{"body": "gui.get_layer(${1:node})", "prefix": "gui.get_layer(node)", "description": "gets the node layer"}], "gui.EASING_INOUTBACK": [{"body": "gui.EASING_INOUTBACK", "prefix": "gui.EASING_INOUTBACK", "description": "in-out-back"}], "package.preload": [{"body": "package.preload()", "prefix": "package.preload", "description": "a table of special function loaders"}], "resource.TEXTURE_FORMAT_RGB": [{"body": "resource.TEXTURE_FORMAT_RGB", "prefix": "resource.TEXTURE_FORMAT_RGB", "description": "RGB type texture format"}], "go.get_position([id])": [{"body": "go.get_position(${1:[id]})", "prefix": "go.get_position([id])", "description": "gets the position of a game object instance"}], "vmath.mul_per_elem(v1, v2)": [{"body": "vmath.mul_per_elem(${1:v1}, ${2:v2})", "prefix": "vmath.mul_per_elem(v1, v2)", "description": "performs an element wise multiplication of two vectors"}], "render.set_polygon_offset(factor, units)": [{"body": "render.set_polygon_offset(${1:factor}, ${2:units})", "prefix": "render.set_polygon_offset(factor, units)", "description": "sets the polygon offset"}], "math.log10(x)": [{"body": "math.log10(${1:x})", "prefix": "math.log10(x)", "description": "log to the base 10"}], "render.STENCIL_OP_REPLACE": [{"body": "render.STENCIL_OP_REPLACE", "prefix": "render.STENCIL_OP_REPLACE", "description": ""}], "gui.get_clipping_inverted(node)": [{"body": "gui.get_clipping_inverted(${1:node})", "prefix": "gui.get_clipping_inverted(node)", "description": "gets node clipping inverted state"}], "render.BUFFER_DEPTH_BIT": [{"body": "render.BUFFER_DEPTH_BIT", "prefix": "render.BUFFER_DEPTH_BIT", "description": ""}], "math.log(x)": [{"body": "math.log(${1:x})", "prefix": "math.log(x)", "description": "natural log"}], "gui.get_position(node)": [{"body": "gui.get_position(${1:node})", "prefix": "gui.get_position(node)", "description": "gets the node position"}], "sys.set_connectivity_host(host)": [{"body": "sys.set_connectivity_host(${1:host})", "prefix": "sys.set_connectivity_host(host)", "description": "set host to check for network connectivity against"}], "gui.get_blend_mode(node)": [{"body": "gui.get_blend_mode(${1:node})", "prefix": "gui.get_blend_mode(node)", "description": "gets the node blend mode"}], "vmath.quat_rotation_x(angle)": [{"body": "vmath.quat_rotation_x(${1:angle})", "prefix": "vmath.quat_rotation_x(angle)", "description": "creates a quaternion from rotation around x-axis"}], "physics.get_joint_reaction_torque(collisionobject, joint_id)": [{"body": "physics.get_joint_reaction_torque(${1:collisionobject}, ${2:joint_id})", "prefix": "physics.get_joint_reaction_torque(collisionobject, joint_id)", "description": "get the reaction torque for a joint"}], "unconnected:getoption(option)": [{"body": "unconnected:getoption(${1:option})", "prefix": "unconnected:getoption(option)", "description": "gets options for the UDP socket"}], "buffer.VALUE_TYPE_INT8": [{"body": "buffer.VALUE_TYPE_INT8", "prefix": "buffer.VALUE_TYPE_INT8", "description": "int8"}], "on_message(self, message_id, message)": [{"body": "on_message(${1:self}, ${2:message_id}, ${3:message})", "prefix": "on_message(self, message_id, message)", "description": "called when a message has been sent to the gui component"}], "vmath.cross(v1, v2)": [{"body": "vmath.cross(${1:v1}, ${2:v2})", "prefix": "vmath.cross(v1, v2)", "description": "calculates the cross-product of two vectors"}], "collectionfactory.load([url], [complete_function])": [{"body": "collectionfactory.load(${1:[url]}, ${2:[complete_function]})", "prefix": "collectionfactory.load([url], [complete_function])", "description": "Load resources of a collection factory prototype."}], "client:getstats": [{"body": "client:getstats()", "prefix": "client:getstats", "description": "gets accounting information on the socket"}], "render.enable_texture(unit, render_target, buffer_type)": [{"body": "render.enable_texture(${1:unit}, ${2:render_target}, ${3:buffer_type})", "prefix": "render.enable_texture(unit, render_target, buffer_type)", "description": "enables a texture for a render target"}], "render.FORMAT_RGBA_DXT5": [{"body": "render.FORMAT_RGBA_DXT5", "prefix": "render.FORMAT_RGBA_DXT5", "description": ""}], "coroutine.wrap(f)": [{"body": "coroutine.wrap(${1:f})", "prefix": "coroutine.wrap(f)", "description": "creates a thread and returns a function to resume it"}], "--config=": [{"body": "--config=", "prefix": "--config=", "description": "override game property"}], "render.FORMAT_RGBA_DXT1": [{"body": "render.FORMAT_RGBA_DXT1", "prefix": "render.FORMAT_RGBA_DXT1", "description": ""}], "render.FORMAT_RGBA_DXT3": [{"body": "render.FORMAT_RGBA_DXT3", "prefix": "render.FORMAT_RGBA_DXT3", "description": ""}], "gui.SIZE_MODE_MANUAL": [{"body": "gui.SIZE_MODE_MANUAL", "prefix": "gui.SIZE_MODE_MANUAL", "description": "manual size mode"}], "math.pow(x, y)": [{"body": "math.pow(${1:x}, ${2:y})", "prefix": "math.pow(x, y)", "description": "raise a number to a power"}], "render.FILTER_LINEAR": [{"body": "render.FILTER_LINEAR", "prefix": "render.FILTER_LINEAR", "description": ""}], "client:receive([pattern], [prefix])": [{"body": "client:receive(${1:[pattern]}, ${2:[prefix]})", "prefix": "client:receive([pattern], [prefix])", "description": "receives data from a client socket"}], "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH": [{"body": "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH", "prefix": "resource.LIVEUPDATE_ENGINE_VERSION_MISMATCH", "description": "LIVEUPDATE_ENGINE_VERSION_MISMATCH"}], "vmath.rotate(q, v1)": [{"body": "vmath.rotate(${1:q}, ${2:v1})", "prefix": "vmath.rotate(q, v1)", "description": "rotates a vector by a quaternion"}], "resource.store_resource(manifest_reference, data, hexdigest, callback)": [{"body": "resource.store_resource(${1:manifest_reference}, ${2:data}, ${3:hexdigest}, ${4:callback})", "prefix": "resource.store_resource(manifest_reference, data, hexdigest, callback)", "description": "add a resource to the data archive and runtime index"}], "io.open(filename, [mode])": [{"body": "io.open(${1:filename}, ${2:[mode]})", "prefix": "io.open(filename, [mode])", "description": "opens a file"}], "debug.getregistry": [{"body": "debug.getregistry()", "prefix": "debug.getregistry", "description": "returns the registry table"}], "crash.get_extra_data(handle)": [{"body": "crash.get_extra_data(${1:handle})", "prefix": "crash.get_extra_data(handle)", "description": "read text blob recorded in a crash dump"}], "gui.ANCHOR_BOTTOM": [{"body": "gui.ANCHOR_BOTTOM", "prefix": "gui.ANCHOR_BOTTOM", "description": "bottom y-anchor"}], "render.COMPARE_FUNC_ALWAYS": [{"body": "render.COMPARE_FUNC_ALWAYS", "prefix": "render.COMPARE_FUNC_ALWAYS", "description": ""}], "vmath.quat_basis(x, y, z)": [{"body": "vmath.quat_basis(${1:x}, ${2:y}, ${3:z})", "prefix": "vmath.quat_basis(x, y, z)", "description": "creates a quaternion from three base unit vectors"}], "master:settimeout(value, [mode])": [{"body": "master:settimeout(${1:value}, ${2:[mode]})", "prefix": "master:settimeout(value, [mode])", "description": "set the timeout values for the socket"}], "gui.KEYBOARD_TYPE_NUMBER_PAD": [{"body": "gui.KEYBOARD_TYPE_NUMBER_PAD", "prefix": "gui.KEYBOARD_TYPE_NUMBER_PAD", "description": "number input keyboard"}], "profiler.MODE_PAUSE": [{"body": "profiler.MODE_PAUSE", "prefix": "profiler.MODE_PAUSE", "description": "pause on current frame"}], "hash(s)": [{"body": "hash(${1:s})", "prefix": "hash(s)", "description": "hashes a string"}], "gui.get_inherit_alpha(node)": [{"body": "gui.get_inherit_alpha(${1:node})", "prefix": "gui.get_inherit_alpha(node)", "description": "gets the node inherit alpha state"}], "master:dirty": [{"body": "master:dirty()", "prefix": "master:dirty", "description": "checks the read buffer status"}], "go.EASING_INCUBIC": [{"body": "go.EASING_INCUBIC", "prefix": "go.EASING_INCUBIC", "description": "in-cubic"}], "file:write(...)": [{"body": "file:write(${1:...})", "prefix": "file:write(...)", "description": "writes to a file"}], "gui.get_text_metrics(font, text, width, line_break, leading, tracking)": [{"body": "gui.get_text_metrics(${1:font}, ${2:text}, ${3:width}, ${4:line_break}, ${5:leading}, ${6:tracking})", "prefix": "gui.get_text_metrics(font, text, width, line_break, leading, tracking)", "description": "get text metrics"}], "render.FORMAT_DEPTH": [{"body": "render.FORMAT_DEPTH", "prefix": "render.FORMAT_DEPTH", "description": ""}], "render.FORMAT_STENCIL": [{"body": "render.FORMAT_STENCIL", "prefix": "render.FORMAT_STENCIL", "description": ""}], "getmetatable(object)": [{"body": "getmetatable(${1:object})", "prefix": "getmetatable(object)", "description": "returns the metatable for the object"}], "debug.setfenv(object, table)": [{"body": "debug.setfenv(${1:object}, ${2:table})", "prefix": "debug.setfenv(object, table)", "description": "sets the environment of an object"}], "gui.CLIPPING_MODE_STENCIL": [{"body": "gui.CLIPPING_MODE_STENCIL", "prefix": "gui.CLIPPING_MODE_STENCIL", "description": "clipping mode stencil"}], "final(self)": [{"body": "final(${1:self})", "prefix": "final(self)", "description": "called when a script component is finalized"}, {"body": "final(${1:self})", "prefix": "final(self)", "description": "called when a gui component is finalized"}], "vmath.matrix4_rotation_y(angle)": [{"body": "vmath.matrix4_rotation_y(${1:angle})", "prefix": "vmath.matrix4_rotation_y(angle)", "description": "creates a matrix from rotation around y-axis"}], "go.EASING_INOUTQUINT": [{"body": "go.EASING_INOUTQUINT", "prefix": "go.EASING_INOUTQUINT", "description": "in-out-quintic"}], "ray_cast_response(fraction, position, normal, id, group, request_id)": [{"body": "msg.post(${1:receiver}, \"ray_cast_response\", ${2:{${3:fraction}, ${4:position}, ${5:normal}, ${6:id}, ${7:group}, ${8:request_id}\\}})", "prefix": "ray_cast_response(fraction, position, normal, id, group, request_id)", "description": "reports a ray cast hit"}], "unconnected:getsockname": [{"body": "unconnected:getsockname()", "prefix": "unconnected:getsockname", "description": "gets the local address information associated to the socket"}], "crash.load_previous": [{"body": "crash.load_previous()", "prefix": "crash.load_previous", "description": "loads a previously written crash dump"}], "sys.load(filename)": [{"body": "sys.load(${1:filename})", "prefix": "sys.load(filename)", "description": "loads a lua table from a file on disk"}], "resource.TEXTURE_FORMAT_LUMINANCE": [{"body": "resource.TEXTURE_FORMAT_LUMINANCE", "prefix": "resource.TEXTURE_FORMAT_LUMINANCE", "description": "luminance type texture format"}], "gui.get_particlefx(node)": [{"body": "gui.get_particlefx(${1:node})", "prefix": "gui.get_particlefx(node)", "description": "Gets a particle fx"}], "debug.traceback([thread], [message], [level])": [{"body": "debug.traceback(${1:[thread]}, ${2:[message]}, ${3:[level]})", "prefix": "debug.traceback([thread], [message], [level])", "description": "returns a string with a traceback of the stack call"}], "physics.JOINT_TYPE_FIXED(max_length)": [{"body": "physics.JOINT_TYPE_FIXED", "prefix": "physics.JOINT_TYPE_FIXED(max_length)", "description": "fixed joint type"}], "error(message, [level])": [{"body": "error(${1:message}, ${2:[level]})", "prefix": "error(message, [level])", "description": "raises an error message"}], "DM_QUIT_ON_ESC": [{"body": "DM_QUIT_ON_ESC", "prefix": "DM_QUIT_ON_ESC", "description": "enables quit on escape key"}], "render.set_render_target(render_target, [options])": [{"body": "render.set_render_target(${1:render_target}, ${2:[options]})", "prefix": "render.set_render_target(render_target, [options])", "description": "sets a render target"}], "gui.BLEND_ADD": [{"body": "gui.BLEND_ADD", "prefix": "gui.BLEND_ADD", "description": "additive blending"}], "render.COMPARE_FUNC_EQUAL": [{"body": "render.COMPARE_FUNC_EQUAL", "prefix": "render.COMPARE_FUNC_EQUAL", "description": ""}], "physics.create_joint(joint_type, collisionobject_a, joint_id, position_a, collisionobject_b, position_b, [properties])": [{"body": "physics.create_joint(${1:joint_type}, ${2:collisionobject_a}, ${3:joint_id}, ${4:position_a}, ${5:collisionobject_b}, ${6:position_b}, ${7:[properties]})", "prefix": "physics.create_joint(joint_type, collisionobject_a, joint_id, position_a, collisionobject_b, position_b, [properties])", "description": "create a physics joint"}], "gui.set_xanchor(node, anchor)": [{"body": "gui.set_xanchor(${1:node}, ${2:anchor})", "prefix": "gui.set_xanchor(node, anchor)", "description": "sets the x-anchor of a node"}], "linear_velocity": [{"body": "\"linear_velocity\"", "prefix": "linear_velocity", "description": "vector3 collision object linear velocity"}], "gui.set_texture_data(texture, width, height, type, buffer, flip)": [{"body": "gui.set_texture_data(${1:texture}, ${2:width}, ${3:height}, ${4:type}, ${5:buffer}, ${6:flip})", "prefix": "gui.set_texture_data(texture, width, height, type, buffer, flip)", "description": "set the buffer data for a texture"}], "render.STENCIL_OP_ZERO": [{"body": "render.STENCIL_OP_ZERO", "prefix": "render.STENCIL_OP_ZERO", "description": ""}], "string.reverse(s)": [{"body": "string.reverse(${1:s})", "prefix": "string.reverse(s)", "description": "reverses the order of characters in a string"}], "profiler.set_ui_view_mode(mode)": [{"body": "profiler.set_ui_view_mode(${1:mode})", "prefix": "profiler.set_ui_view_mode(mode)", "description": "sets the the on-screen profiler ui view mode"}], "gui.EASING_OUTINELASTIC": [{"body": "gui.EASING_OUTINELASTIC", "prefix": "gui.EASING_OUTINELASTIC", "description": "out-in-elastic"}], "go.get_world_scale_uniform([id])": [{"body": "go.get_world_scale_uniform(${1:[id]})", "prefix": "go.get_world_scale_uniform([id])", "description": "gets the uniform game object instance world scale factor"}], "gui.RESULT_TEXTURE_ALREADY_EXISTS": [{"body": "gui.RESULT_TEXTURE_ALREADY_EXISTS", "prefix": "gui.RESULT_TEXTURE_ALREADY_EXISTS", "description": "texture already exists"}], "socket.gettime": [{"body": "socket.gettime()", "prefix": "socket.gettime", "description": "gets seconds since system epoch"}], "server:close": [{"body": "server:close()", "prefix": "server:close", "description": "closes a server TCP object"}], "factory.STATUS_UNLOADED": [{"body": "factory.STATUS_UNLOADED", "prefix": "factory.STATUS_UNLOADED", "description": "unloaded"}], "sys.open_url(url, [attributes])": [{"body": "sys.open_url(${1:url}, ${2:[attributes]})", "prefix": "sys.open_url(url, [attributes])", "description": "open url in default application"}], "crash.SYSFIELD_DEVICE_LANGUAGE": [{"body": "crash.SYSFIELD_DEVICE_LANGUAGE", "prefix": "crash.SYSFIELD_DEVICE_LANGUAGE", "description": "system device language as reported by sys.get_sys_info"}], "gui.set_inherit_alpha(node, inherit_alpha)": [{"body": "gui.set_inherit_alpha(${1:node}, ${2:inherit_alpha})", "prefix": "gui.set_inherit_alpha(node, inherit_alpha)", "description": "sets the node inherit alpha state"}], "vmath.vector3(n)": [{"body": "vmath.vector3(${1:n})", "prefix": "vmath.vector3(n)", "description": "creates a new vector from scalar value"}], "gui.get_spine_bone(node, bone_id)": [{"body": "gui.get_spine_bone(${1:node}, ${2:bone_id})", "prefix": "gui.get_spine_bone(node, bone_id)", "description": "retrieve the GUI node corresponding to a spine skeleton bone"}], "spine.reset_ik_target(url, ik_constraint_id)": [{"body": "spine.reset_ik_target(${1:url}, ${2:ik_constraint_id})", "prefix": "spine.reset_ik_target(url, ik_constraint_id)", "description": "reset the IK constraint target position to default of a spinemodel"}], "gui.new_pie_node(pos, size)": [{"body": "gui.new_pie_node(${1:pos}, ${2:size})", "prefix": "gui.new_pie_node(pos, size)", "description": "creates a new pie node"}], "go.EASING_INOUTBACK": [{"body": "go.EASING_INOUTBACK", "prefix": "go.EASING_INOUTBACK", "description": "in-out-back"}], "debug.getmetatable(object)": [{"body": "debug.getmetatable(${1:object})", "prefix": "debug.getmetatable(object)", "description": "returns the metatable of the given object"}], "hash_to_hex(h)": [{"body": "hash_to_hex(${1:h})", "prefix": "hash_to_hex(h)", "description": "get hex representation of a hash value as a string"}], "socket.dns.getnameinfo(address)": [{"body": "socket.dns.getnameinfo(${1:address})", "prefix": "socket.dns.getnameinfo(address)", "description": "resolve to hostname (IPv4 or IPv6)"}], "client:shutdown(mode)": [{"body": "client:shutdown(${1:mode})", "prefix": "client:shutdown(mode)", "description": "shut down socket"}], "master:getfd": [{"body": "master:getfd()", "prefix": "master:getfd", "description": "gets the socket descriptor"}], "collectionfactory.create(url, [position], [rotation], [properties], [scale])": [{"body": "collectionfactory.create(${1:url}, ${2:[position]}, ${3:[rotation]}, ${4:[properties]}, ${5:[scale]})", "prefix": "collectionfactory.create(url, [position], [rotation], [properties], [scale])", "description": "Spawn a new instance of a collection into the existing collection."}], "vmath.conj(q1)": [{"body": "vmath.conj(${1:q1})", "prefix": "vmath.conj(q1)", "description": "calculates the conjugate of a quaternion"}], "load": [{"body": "msg.post(${1:receiver}, \"load\")", "prefix": "load", "description": "tells a collection proxy to start loading the referenced collection"}], "os.setlocale(locale, [category])": [{"body": "os.setlocale(${1:locale}, ${2:[category]})", "prefix": "os.setlocale(locale, [category])", "description": "sets the current locale to the supplied locale"}], "os.execute([command])": [{"body": "os.execute(${1:[command]})", "prefix": "os.execute([command])", "description": "executes an operating system command"}], "gui.PROP_SIZE": [{"body": "gui.PROP_SIZE", "prefix": "gui.PROP_SIZE", "description": "size property"}], "color": [{"body": "\"color\"", "prefix": "color", "description": "vector4 label color"}], "sound_done([play_id])": [{"body": "msg.post(${1:receiver}, \"sound_done\", ${2:{${3:[play_id]}\\}})", "prefix": "sound_done([play_id])", "description": "reports when a sound has finished playing"}], "crash.set_user_field(index, value)": [{"body": "crash.set_user_field(${1:index}, ${2:value})", "prefix": "crash.set_user_field(index, value)", "description": "stores user-defined string value"}], "go.EASING_INBACK": [{"body": "go.EASING_INBACK", "prefix": "go.EASING_INBACK", "description": "in-back"}], "html5.run(code)": [{"body": "html5.run(${1:code})", "prefix": "html5.run(code)", "description": "run JavaScript code, in the browser, from Lua"}], "gui.PLAYBACK_ONCE_PINGPONG": [{"body": "gui.PLAYBACK_ONCE_PINGPONG", "prefix": "gui.PLAYBACK_ONCE_PINGPONG", "description": "once forward and then backward"}], "go.get_world_scale([id])": [{"body": "go.get_world_scale(${1:[id]})", "prefix": "go.get_world_scale([id])", "description": "gets the game object instance world 3D scale factor"}], "gui.set_text(node, text)": [{"body": "gui.set_text(${1:node}, ${2:text})", "prefix": "gui.set_text(node, text)", "description": "sets the node text"}], "sound.pause(url, pause)": [{"body": "sound.pause(${1:url}, ${2:pause})", "prefix": "sound.pause(url, pause)", "description": "pause a playing a sound(s)"}], "gui.EASING_OUTSINE": [{"body": "gui.EASING_OUTSINE", "prefix": "gui.EASING_OUTSINE", "description": "out-sine"}], "client:getfd": [{"body": "client:getfd()", "prefix": "client:getfd", "description": "gets the socket descriptor"}], "gui.get_scale(node)": [{"body": "gui.get_scale(${1:node})", "prefix": "gui.get_scale(node)", "description": "gets the node scale"}], "gui.set_spine_cursor(node, cursor)": [{"body": "gui.set_spine_cursor(${1:node}, ${2:cursor})", "prefix": "gui.set_spine_cursor(node, cursor)", "description": "sets the normalized cursor of the animation on a spine node"}], "math.ldexp(m, e)": [{"body": "math.ldexp(${1:m}, ${2:e})", "prefix": "math.ldexp(m, e)", "description": "compute m* 2^n"}], "os.getenv(varname)": [{"body": "os.getenv(${1:varname})", "prefix": "os.getenv(varname)", "description": "returns an operating system environment variable"}], "factory.load([url], [complete_function])": [{"body": "factory.load(${1:[url]}, ${2:[complete_function]})", "prefix": "factory.load([url], [complete_function])", "description": "Load resources of a factory prototype."}], "bit.bxor(x1, [x2...])": [{"body": "bit.bxor(${1:x1}, ${2:[x2...]})", "prefix": "bit.bxor(x1, [x2...])", "description": "bitwise xor"}], "factory.STATUS_LOADING": [{"body": "factory.STATUS_LOADING", "prefix": "factory.STATUS_LOADING", "description": "loading"}], "table.insert(table, [pos], value)": [{"body": "table.insert(${1:table}, ${2:[pos]}, ${3:value})", "prefix": "table.insert(table, [pos], value)", "description": "inserts a new item into a numerically-keyed table"}], "gui.set_clipping_mode(node, clipping_mode)": [{"body": "gui.set_clipping_mode(${1:node}, ${2:clipping_mode})", "prefix": "gui.set_clipping_mode(node, clipping_mode)", "description": "sets node clipping mode state"}], "render.set_blend_func(source_factor, destination_factor)": [{"body": "render.set_blend_func(${1:source_factor}, ${2:destination_factor})", "prefix": "render.set_blend_func(source_factor, destination_factor)", "description": "sets the blending function"}], "sys.set_update_frequency(frequency)": [{"body": "sys.set_update_frequency(${1:frequency})", "prefix": "sys.set_update_frequency(frequency)", "description": "set update frequency"}], "package.cpath": [{"body": "package.cpath()", "prefix": "package.cpath", "description": "search path used for loading DLLs using the require function"}], "sys.exit(code)": [{"body": "sys.exit(${1:code})", "prefix": "sys.exit(code)", "description": "exits application"}], "gui.get_outer_bounds(node)": [{"body": "gui.get_outer_bounds(${1:node})", "prefix": "gui.get_outer_bounds(node)", "description": "gets the pie outer bounds mode"}], "enable": [{"body": "msg.post(${1:receiver}, \"enable\")", "prefix": "enable", "description": "tells a collection proxy to enable the referenced collection"}, {"body": "msg.post(${1:receiver}, \"enable\")", "prefix": "enable", "description": "enables the receiving component"}], "gui.set_inner_radius(node, radius)": [{"body": "gui.set_inner_radius(${1:node}, ${2:radius})", "prefix": "gui.set_inner_radius(node, radius)", "description": "sets the pie inner radius"}], "gui.set_perimeter_vertices(node, vertices)": [{"body": "gui.set_perimeter_vertices(${1:node}, ${2:vertices})", "prefix": "gui.set_perimeter_vertices(node, vertices)", "description": "sets the number of generated vertices around the perimeter"}], "math.sqrt(x)": [{"body": "math.sqrt(${1:x})", "prefix": "math.sqrt(x)", "description": "square root"}], "crash.get_signum(handle)": [{"body": "crash.get_signum(${1:handle})", "prefix": "crash.get_signum(handle)", "description": "read signal number from a crash report"}], "gui.set_layer(node, layer)": [{"body": "gui.set_layer(${1:node}, ${2:layer})", "prefix": "gui.set_layer(node, layer)", "description": "sets the node layer"}], "vmath.vector3(v1)": [{"body": "vmath.vector3(${1:v1})", "prefix": "vmath.vector3(v1)", "description": "creates a new vector from another existing vector"}], "go.EASING_INEXPO": [{"body": "go.EASING_INEXPO", "prefix": "go.EASING_INEXPO", "description": "in-exponential"}], "gui.set_size(node, size)": [{"body": "gui.set_size(${1:node}, ${2:size})", "prefix": "gui.set_size(node, size)", "description": "sets the node size"}], "render.draw(predicate, [constants])": [{"body": "render.draw(${1:predicate}, ${2:[constants]})", "prefix": "render.draw(predicate, [constants])", "description": "draws all objects matching a predicate"}], "gui.get_texture(node)": [{"body": "gui.get_texture(${1:node})", "prefix": "gui.get_texture(node)", "description": "gets node texture"}], "master:getstats": [{"body": "master:getstats()", "prefix": "master:getstats", "description": "gets accounting information on the socket"}], "sound": [{"body": "\"sound\"", "prefix": "sound", "description": "hash sound data"}], "setfenv(f, table)": [{"body": "setfenv(${1:f}, ${2:table})", "prefix": "setfenv(f, table)", "description": "sets a function's environment"}], "go.EASING_OUTQUAD": [{"body": "go.EASING_OUTQUAD", "prefix": "go.EASING_OUTQUAD", "description": "out-quadratic"}], "socket.dns.gethostname": [{"body": "socket.dns.gethostname()", "prefix": "socket.dns.gethostname", "description": "gets the machine host name"}], "gui.BLEND_ADD_ALPHA": [{"body": "gui.BLEND_ADD_ALPHA", "prefix": "gui.BLEND_ADD_ALPHA", "description": "additive alpha blending"}], "async_load": [{"body": "msg.post(${1:receiver}, \"async_load\")", "prefix": "async_load", "description": "tells a collection proxy to start asynchronous loading of the referenced collection"}], "gui.get_pivot(node)": [{"body": "gui.get_pivot(${1:node})", "prefix": "gui.get_pivot(node)", "description": "gets the pivot of a node"}], "go.EASING_INOUTCIRC": [{"body": "go.EASING_INOUTCIRC", "prefix": "go.EASING_INOUTCIRC", "description": "in-out-circlic"}], "cursor": [{"body": "\"cursor\"", "prefix": "cursor", "description": "number model cursor"}, {"body": "\"cursor\"", "prefix": "cursor", "description": "number sprite cursor"}, {"body": "\"cursor\"", "prefix": "cursor", "description": "number spine cursor"}], "vmath.quat_rotation_z(angle)": [{"body": "vmath.quat_rotation_z(${1:angle})", "prefix": "vmath.quat_rotation_z(angle)", "description": "creates a quaternion from rotation around z-axis"}], "unconnected:setoption(option, [value])": [{"body": "unconnected:setoption(${1:option}, ${2:[value]})", "prefix": "unconnected:setoption(option, [value])", "description": "sets options for the UDP socket"}], "gui.set_outer_bounds(node, bounds_mode)": [{"body": "gui.set_outer_bounds(${1:node}, ${2:bounds_mode})", "prefix": "gui.set_outer_bounds(node, bounds_mode)", "description": "sets the pie node outer bounds mode"}], "gui.get_adjust_mode(node)": [{"body": "gui.get_adjust_mode(${1:node})", "prefix": "gui.get_adjust_mode(node)", "description": "gets the node adjust mode"}], "on_input(self, action_id, action)": [{"body": "on_input(${1:self}, ${2:action_id}, ${3:action})", "prefix": "on_input(self, action_id, action)", "description": "called when user input is received"}, {"body": "on_input(${1:self}, ${2:action_id}, ${3:action})", "prefix": "on_input(self, action_id, action)", "description": "called when user input is received"}], "crash.SYSFIELD_ENGINE_VERSION": [{"body": "crash.SYSFIELD_ENGINE_VERSION", "prefix": "crash.SYSFIELD_ENGINE_VERSION", "description": "engine version as release number"}], "render.BLEND_SRC_ALPHA": [{"body": "render.BLEND_SRC_ALPHA", "prefix": "render.BLEND_SRC_ALPHA", "description": ""}], "crash.USERFIELD_MAX": [{"body": "crash.USERFIELD_MAX", "prefix": "crash.USERFIELD_MAX", "description": "The max number of user fields."}], "unconnected:setpeername(address, port)": [{"body": "unconnected:setpeername(${1:address}, ${2:port})", "prefix": "unconnected:setpeername(address, port)", "description": "set the peer of the unconnected UDP socket"}], "buffer.VALUE_TYPE_INT16": [{"body": "buffer.VALUE_TYPE_INT16", "prefix": "buffer.VALUE_TYPE_INT16", "description": "int16"}], "gui.get_node(id)": [{"body": "gui.get_node(${1:id})", "prefix": "gui.get_node(id)", "description": "gets the node with the specified id"}], "gui.set_leading(node, leading)": [{"body": "gui.set_leading(${1:node}, ${2:leading})", "prefix": "gui.set_leading(node, leading)", "description": "sets the leading of the text node"}], "math.rad(x)": [{"body": "math.rad(${1:x})", "prefix": "math.rad(x)", "description": "convert degrees to radians"}], "os.remove(filename)": [{"body": "os.remove(${1:filename})", "prefix": "os.remove(filename)", "description": "deletes a file"}], "gui.PIVOT_SW": [{"body": "gui.PIVOT_SW", "prefix": "gui.PIVOT_SW", "description": "south-west pivot"}], "render.BLEND_ONE_MINUS_DST_ALPHA": [{"body": "render.BLEND_ONE_MINUS_DST_ALPHA", "prefix": "render.BLEND_ONE_MINUS_DST_ALPHA", "description": ""}], "rawget(table, index)": [{"body": "rawget(${1:table}, ${2:index})", "prefix": "rawget(table, index)", "description": "gets the value of a table item without invoking metamethods"}], "io.flush": [{"body": "io.flush()", "prefix": "io.flush", "description": "flushes outstanding data to disk for the default output file"}], "tostring(e)": [{"body": "tostring(${1:e})", "prefix": "tostring(e)", "description": "converts its argument to a string"}], "file:close": [{"body": "file:close()", "prefix": "file:close", "description": "closes a file"}], "go.EASING_INQUINT": [{"body": "go.EASING_INQUINT", "prefix": "go.EASING_INQUINT", "description": "in-quintic"}], "animation_done(current_tile, id)": [{"body": "msg.post(${1:receiver}, \"animation_done\", ${2:{${3:current_tile}, ${4:id}\\}})", "prefix": "animation_done(current_tile, id)", "description": "reports that an animation has completed"}], "go.EASING_OUTSINE": [{"body": "go.EASING_OUTSINE", "prefix": "go.EASING_OUTSINE", "description": "out-sine"}], "render.set_cull_face(face_type)": [{"body": "render.set_cull_face(${1:face_type})", "prefix": "render.set_cull_face(face_type)", "description": "sets the cull face"}], "gui.PIVOT_SE": [{"body": "gui.PIVOT_SE", "prefix": "gui.PIVOT_SE", "description": "south-east pivot"}], "collectgarbage([opt], [arg])": [{"body": "collectgarbage(${1:[opt]}, ${2:[arg]})", "prefix": "collectgarbage([opt], [arg])", "description": "collects garbage"}], "gui.play_spine_anim(node, animation_id, playback, [play_properties], [complete_function])": [{"body": "gui.play_spine_anim(${1:node}, ${2:animation_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})", "prefix": "gui.play_spine_anim(node, animation_id, playback, [play_properties], [complete_function])", "description": "play a spine animation"}], "go.get_world_transform([id])": [{"body": "go.get_world_transform(${1:[id]})", "prefix": "go.get_world_transform([id])", "description": "gets the game object instance world transform matrix"}], "gui.play_particlefx(node, [emitter_state_function])": [{"body": "gui.play_particlefx(${1:node}, ${2:[emitter_state_function]})", "prefix": "gui.play_particlefx(node, [emitter_state_function])", "description": "Plays a particle fx"}], "gui.clone_tree(node)": [{"body": "gui.clone_tree(${1:node})", "prefix": "gui.clone_tree(node)", "description": "clone a node including its children"}], "client:getsockname": [{"body": "client:getsockname()", "prefix": "client:getsockname", "description": "gets the local address information from client"}], "vmath.length(v)": [{"body": "vmath.length(${1:v})", "prefix": "vmath.length(v)", "description": "calculates the length of a vector or quaternion"}], "gui.set_particlefx(node, particlefx)": [{"body": "gui.set_particlefx(${1:node}, ${2:particlefx})", "prefix": "gui.set_particlefx(node, particlefx)", "description": "Sets a particle fx"}], "go.EASING_OUTINCUBIC": [{"body": "go.EASING_OUTINCUBIC", "prefix": "go.EASING_OUTINCUBIC", "description": "out-in-cubic"}], "unconnected:receive([size])": [{"body": "unconnected:receive(${1:[size]})", "prefix": "unconnected:receive([size])", "description": "receives a datagram from the UDP socket"}], "unconnected:setsockname(address, port)": [{"body": "unconnected:setsockname(${1:address}, ${2:port})", "prefix": "unconnected:setsockname(address, port)", "description": "binds the UDP socket to a local address"}], "physics.set_joint_properties(collisionobject, joint_id, properties)": [{"body": "physics.set_joint_properties(${1:collisionobject}, ${2:joint_id}, ${3:properties})", "prefix": "physics.set_joint_properties(collisionobject, joint_id, properties)", "description": "set properties for a joint"}], "render.set_view(matrix)": [{"body": "render.set_view(${1:matrix})", "prefix": "render.set_view(matrix)", "description": "sets the view matrix"}], "pan": [{"body": "\"pan\"", "prefix": "pan", "description": "number sound pan"}], "gui.get_flipbook(node)": [{"body": "gui.get_flipbook(${1:node})", "prefix": "gui.get_flipbook(node)", "description": "gets the node flipbook animation"}], "gui.set_font(node, font)": [{"body": "gui.set_font(${1:node}, ${2:font})", "prefix": "gui.set_font(node, font)", "description": "sets the node font"}], "release_camera_focus": [{"body": "msg.post(${1:receiver}, \"release_camera_focus\")", "prefix": "release_camera_focus", "description": "deactivates the receiving camera"}], "render.disable_material": [{"body": "render.disable_material()", "prefix": "render.disable_material", "description": "disables the currently enabled material"}], "particlefx.EMITTER_STATE_POSTSPAWN": [{"body": "particlefx.EMITTER_STATE_POSTSPAWN", "prefix": "particlefx.EMITTER_STATE_POSTSPAWN", "description": "postspawn state"}], "play_sound([delay], [gain], [play_id])": [{"body": "msg.post(${1:receiver}, \"play_sound\", ${2:{${3:[delay]}, ${4:[gain]}, ${5:[play_id]}\\}})", "prefix": "play_sound([delay], [gain], [play_id])", "description": "plays a sound"}], "factory.create(url, [position], [rotation], [properties], [scale])": [{"body": "factory.create(${1:url}, ${2:[position]}, ${3:[rotation]}, ${4:[properties]}, ${5:[scale]})", "prefix": "factory.create(url, [position], [rotation], [properties], [scale])", "description": "make a factory create a new game object"}], "profiler.view_recorded_frame(frame_index)": [{"body": "profiler.view_recorded_frame(${1:frame_index})", "prefix": "profiler.view_recorded_frame(frame_index)", "description": "displays a previously recorded frame in the on-screen profiler ui"}], "unconnected:settimeout(value)": [{"body": "unconnected:settimeout(${1:value})", "prefix": "unconnected:settimeout(value)", "description": "sets the timeout value for the UDP socket"}], "acquire_camera_focus": [{"body": "msg.post(${1:receiver}, \"acquire_camera_focus\")", "prefix": "acquire_camera_focus", "description": "makes the receiving camera become the active camera"}], "vmath.normalize(v1)": [{"body": "vmath.normalize(${1:v1})", "prefix": "vmath.normalize(v1)", "description": "normalizes a vector"}], "server:settimeout(value, [mode])": [{"body": "server:settimeout(${1:value}, ${2:[mode]})", "prefix": "server:settimeout(value, [mode])", "description": "set the timeout values for the socket"}], "gui.CLIPPING_MODE_NONE": [{"body": "gui.CLIPPING_MODE_NONE", "prefix": "gui.CLIPPING_MODE_NONE", "description": "clipping mode none"}], "gui.EASING_OUTBOUNCE": [{"body": "gui.EASING_OUTBOUNCE", "prefix": "gui.EASING_OUTBOUNCE", "description": "out-bounce"}], "gui.get_clipping_mode(node)": [{"body": "gui.get_clipping_mode(${1:node})", "prefix": "gui.get_clipping_mode(node)", "description": "gets the node clipping mode"}], "physics.JOINT_TYPE_WELD(reference_angle, frequency, damping)": [{"body": "physics.JOINT_TYPE_WELD", "prefix": "physics.JOINT_TYPE_WELD(reference_angle, frequency, damping)", "description": "weld joint type"}], "vmath.matrix4_frustum(left, right, bottom, top, near, far)": [{"body": "vmath.matrix4_frustum(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far})", "prefix": "vmath.matrix4_frustum(left, right, bottom, top, near, far)", "description": "creates a frustum matrix"}], "resource.get_current_manifest": [{"body": "resource.get_current_manifest()", "prefix": "resource.get_current_manifest", "description": "return a reference to the Manifest that is currently loaded"}], "go.set_rotation(rotation, [id])": [{"body": "go.set_rotation(${1:rotation}, ${2:[id]})", "prefix": "go.set_rotation(rotation, [id])", "description": "sets the rotation of the game object instance"}], "gui.ANCHOR_NONE": [{"body": "gui.ANCHOR_NONE", "prefix": "gui.ANCHOR_NONE", "description": "no anchor"}], "server:setstats(received, sent, age)": [{"body": "server:setstats(${1:received}, ${2:sent}, ${3:age})", "prefix": "server:setstats(received, sent, age)", "description": "resets accounting information on the socket"}], "crash.SYSFIELD_TERRITORY": [{"body": "crash.SYSFIELD_TERRITORY", "prefix": "crash.SYSFIELD_TERRITORY", "description": "system territory as reported by sys.get_sys_info"}], "launch_project": [{"body": "launch_project", "prefix": "launch_project", "description": "launch with a specific project"}], "resource.set(path, buffer)": [{"body": "resource.set(${1:path}, ${2:buffer})", "prefix": "resource.set(path, buffer)", "description": "Set a resource"}], "debug.getupvalue(func, up)": [{"body": "debug.getupvalue(${1:func}, ${2:up})", "prefix": "debug.getupvalue(func, up)", "description": "returns the name and value of an upvalue"}], "position": [{"body": "\"position\"", "prefix": "position", "description": "vector3 game object position"}], "resource.load(path)": [{"body": "resource.load(${1:path})", "prefix": "resource.load(path)", "description": "load a resource"}], "gui.hide_keyboard": [{"body": "gui.hide_keyboard()", "prefix": "gui.hide_keyboard", "description": "hides on-display keyboard if available"}], "resource.font([path])": [{"body": "resource.font(${1:[path]})", "prefix": "resource.font([path])", "description": "reference to font resource"}], "gui.ADJUST_STRETCH": [{"body": "gui.ADJUST_STRETCH", "prefix": "gui.ADJUST_STRETCH", "description": "stretch adjust mode"}], "vmath.vector4(v1)": [{"body": "vmath.vector4(${1:v1})", "prefix": "vmath.vector4(v1)", "description": "creates a new vector from another existing vector"}], "unconnected:close": [{"body": "unconnected:close()", "prefix": "unconnected:close", "description": "closes the UDP socket"}], "crash.SYSFIELD_ANDROID_BUILD_FINGERPRINT": [{"body": "crash.SYSFIELD_ANDROID_BUILD_FINGERPRINT", "prefix": "crash.SYSFIELD_ANDROID_BUILD_FINGERPRINT", "description": "android build fingerprint"}], "gui.get_font(node)": [{"body": "gui.get_font(${1:node})", "prefix": "gui.get_font(node)", "description": "gets the node font"}], "gui.BLEND_ALPHA": [{"body": "gui.BLEND_ALPHA", "prefix": "gui.BLEND_ALPHA", "description": "alpha blending"}], "gui.PROP_SCALE": [{"body": "gui.PROP_SCALE", "prefix": "gui.PROP_SCALE", "description": "scale property"}], "connected:receive([size])": [{"body": "connected:receive(${1:[size]})", "prefix": "connected:receive([size])", "description": "receives a datagram from the UDP socket"}], "gui.set_clipping_inverted(node, inverted)": [{"body": "gui.set_clipping_inverted(${1:node}, ${2:inverted})", "prefix": "gui.set_clipping_inverted(node, inverted)", "description": "sets node clipping inversion"}], "require(modname)": [{"body": "require(${1:modname})", "prefix": "require(modname)", "description": "loads a module"}], "bit.tobit(x)": [{"body": "bit.tobit(${1:x})", "prefix": "bit.tobit(x)", "description": "normalize number to the numeric range for bit operations"}], "speed": [{"body": "\"speed\"", "prefix": "speed", "description": "number sound speed"}], "vmath.vector4(x, y, z, w)": [{"body": "vmath.vector4(${1:x}, ${2:y}, ${3:z}, ${4:w})", "prefix": "vmath.vector4(x, y, z, w)", "description": "creates a new vector from its coordinates"}], "gui.get_tracking(node)": [{"body": "gui.get_tracking(${1:node})", "prefix": "gui.get_tracking(node)", "description": "gets the tracking of the text node"}], "layout_changed(id, previous_id)": [{"body": "msg.post(${1:receiver}, \"layout_changed\", ${2:{${3:id}, ${4:previous_id}\\}})", "prefix": "layout_changed(id, previous_id)", "description": "reports a layout change"}], "msg.post(receiver, message_id, [message])": [{"body": "msg.post(${1:receiver}, ${2:message_id}, ${3:[message]})", "prefix": "msg.post(receiver, message_id, [message])", "description": "posts a message to a receiving URL"}], "physics.raycast_async(from, to, groups, [request_id])": [{"body": "physics.raycast_async(${1:from}, ${2:to}, ${3:groups}, ${4:[request_id]})", "prefix": "physics.raycast_async(from, to, groups, [request_id])", "description": "requests a ray cast to be performed"}], "rawequal(v1, v2)": [{"body": "rawequal(${1:v1}, ${2:v2})", "prefix": "rawequal(v1, v2)", "description": "compares two values for equality without invoking metamethods"}], "gui.get_rotation(node)": [{"body": "gui.get_rotation(${1:node})", "prefix": "gui.get_rotation(node)", "description": "gets the node rotation"}], "pairs(t)": [{"body": "pairs(${1:t})", "prefix": "pairs(t)", "description": "traverse all items in a table"}], "math.atan(x)": [{"body": "math.atan(${1:x})", "prefix": "math.atan(x)", "description": "arc tangent"}], "render.disable_texture(unit)": [{"body": "render.disable_texture(${1:unit})", "prefix": "render.disable_texture(unit)", "description": "disables a texture for a render target"}], "gui.clone(node)": [{"body": "gui.clone(${1:node})", "prefix": "gui.clone(node)", "description": "clone a node"}], "buffer.VALUE_TYPE_UINT64": [{"body": "buffer.VALUE_TYPE_UINT64", "prefix": "buffer.VALUE_TYPE_UINT64", "description": "uint64"}], "euler": [{"body": "\"euler\"", "prefix": "euler", "description": "vector3 game object euler rotation"}], "go.set_position(position, [id])": [{"body": "go.set_position(${1:position}, ${2:[id]})", "prefix": "go.set_position(position, [id])", "description": "sets the position of the game object instance"}], "master:setfd(handle)": [{"body": "master:setfd(${1:handle})", "prefix": "master:setfd(handle)", "description": "sets the socket descriptor"}], "gui.delete_texture(texture)": [{"body": "gui.delete_texture(${1:texture})", "prefix": "gui.delete_texture(texture)", "description": "delete texture"}], "gui.get_spine_scene(node)": [{"body": "gui.get_spine_scene(${1:node})", "prefix": "gui.get_spine_scene(node)", "description": "gets the spine scene of a node"}], "resource.is_using_liveupdate_data": [{"body": "resource.is_using_liveupdate_data()", "prefix": "resource.is_using_liveupdate_data", "description": "is any liveupdate data mounted and currently in use"}], "pcall(f, arg1, ...)": [{"body": "pcall(${1:f}, ${2:arg1}, ${3:...})", "prefix": "pcall(f, arg1, ...)", "description": "calls a function in protected mode"}], "gui.get_clipping_visible(node)": [{"body": "gui.get_clipping_visible(${1:node})", "prefix": "gui.get_clipping_visible(node)", "description": "gets node clipping visibility state"}], "socket._SETSIZE": [{"body": "socket._SETSIZE", "prefix": "socket._SETSIZE", "description": "max numbers of sockets the select function can handle"}], "gui.EASING_OUTINBACK": [{"body": "gui.EASING_OUTINBACK", "prefix": "gui.EASING_OUTINBACK", "description": "out-in-back"}], "shadow": [{"body": "\"shadow\"", "prefix": "shadow", "description": "vector4 label shadow"}], "os.rename(oldname, newname)": [{"body": "os.rename(${1:oldname}, ${2:newname})", "prefix": "os.rename(oldname, newname)", "description": "renames a file"}], "particlefx.EMITTER_STATE_PRESPAWN": [{"body": "particlefx.EMITTER_STATE_PRESPAWN", "prefix": "particlefx.EMITTER_STATE_PRESPAWN", "description": "prespawn state"}], "gui.EASING_OUTQUART": [{"body": "gui.EASING_OUTQUART", "prefix": "gui.EASING_OUTQUART", "description": "out-quartic"}], "bit.band(x1, [x2...])": [{"body": "bit.band(${1:x1}, ${2:[x2...]})", "prefix": "bit.band(x1, [x2...])", "description": "bitwise and"}], "sys.get_sys_info": [{"body": "sys.get_sys_info()", "prefix": "sys.get_sys_info", "description": "get system information"}], "server:getfd": [{"body": "server:getfd()", "prefix": "server:getfd", "description": "gets the socket descriptor"}], "vmath.matrix4_orthographic(left, right, bottom, top, near, far)": [{"body": "vmath.matrix4_orthographic(${1:left}, ${2:right}, ${3:bottom}, ${4:top}, ${5:near}, ${6:far})", "prefix": "vmath.matrix4_orthographic(left, right, bottom, top, near, far)", "description": "creates an orthographic projection matrix"}], "vmath.project(v1, v2)": [{"body": "vmath.project(${1:v1}, ${2:v2})", "prefix": "vmath.project(v1, v2)", "description": "projects a vector onto another vector"}], "window.WINDOW_EVENT_ICONFIED": [{"body": "window.WINDOW_EVENT_ICONFIED", "prefix": "window.WINDOW_EVENT_ICONFIED", "description": "iconify window event"}], "gui.set_rotation(node, rotation)": [{"body": "gui.set_rotation(${1:node}, ${2:rotation})", "prefix": "gui.set_rotation(node, rotation)", "description": "sets the node rotation"}], "gui.set_id(node, id)": [{"body": "gui.set_id(${1:node}, ${2:id})", "prefix": "gui.set_id(node, id)", "description": "sets the id of the specified node"}], "resource.LIVEUPDATE_OK": [{"body": "resource.LIVEUPDATE_OK", "prefix": "resource.LIVEUPDATE_OK", "description": "LIVEUPDATE_OK"}], "update(self, dt)": [{"body": "update(${1:self}, ${2:dt})", "prefix": "update(self, dt)", "description": "called every frame to update the script component"}, {"body": "update(${1:self}, ${2:dt})", "prefix": "update(self, dt)", "description": "called every frame to update the gui component"}], "bit.bnot(x)": [{"body": "bit.bnot(${1:x})", "prefix": "bit.bnot(x)", "description": "bitwise not"}], "io.input([file])": [{"body": "io.input(${1:[file]})", "prefix": "io.input([file])", "description": "opens filename for input in text mode"}], "gui.PLAYBACK_ONCE_BACKWARD": [{"body": "gui.PLAYBACK_ONCE_BACKWARD", "prefix": "gui.PLAYBACK_ONCE_BACKWARD", "description": "once backward"}], "buffer.get_stream(buffer, stream_name)": [{"body": "buffer.get_stream(${1:buffer}, ${2:stream_name})", "prefix": "buffer.get_stream(buffer, stream_name)", "description": "gets a stream from a buffer"}], "vmath.quat": [{"body": "vmath.quat()", "prefix": "vmath.quat", "description": "creates a new identity quaternion"}], "gui.EASING_INBOUNCE": [{"body": "gui.EASING_INBOUNCE", "prefix": "gui.EASING_INBOUNCE", "description": "in-bounce"}], "sys.set_error_handler(error_handler)": [{"body": "sys.set_error_handler(${1:error_handler})", "prefix": "sys.set_error_handler(error_handler)", "description": "set the error handler"}], "bit.tohex(x, n)": [{"body": "bit.tohex(${1:x}, ${2:n})", "prefix": "bit.tohex(x, n)", "description": "convert number to a hex string"}], "go.EASING_INOUTELASTIC": [{"body": "go.EASING_INOUTELASTIC", "prefix": "go.EASING_INOUTELASTIC", "description": "in-out-elastic"}], "resource.store_archive(path, callback)": [{"body": "resource.store_archive(${1:path}, ${2:callback})", "prefix": "resource.store_archive(path, callback)", "description": "register and store a live update zip file"}], "window.get_dim_mode": [{"body": "window.get_dim_mode()", "prefix": "window.get_dim_mode", "description": "get the mode for screen dimming"}], "sys.save(filename, table)": [{"body": "sys.save(${1:filename}, ${2:table})", "prefix": "sys.save(filename, table)", "description": "saves a lua table to a file stored on disk"}], "gui.cancel_animation(node, property)": [{"body": "gui.cancel_animation(${1:node}, ${2:property})", "prefix": "gui.cancel_animation(node, property)", "description": "cancels an ongoing animation"}], "gui.get_color(node)": [{"body": "gui.get_color(${1:node})", "prefix": "gui.get_color(node)", "description": "gets the node color"}], "timer.delay(delay, repeat, callback)": [{"body": "timer.delay(${1:delay}, ${2:repeat}, ${3:callback})", "prefix": "timer.delay(delay, repeat, callback)", "description": "create a timer"}], "dofile([filename])": [{"body": "dofile(${1:[filename]})", "prefix": "dofile([filename])", "description": "executes a Lua file"}], "gui.delete_node(node)": [{"body": "gui.delete_node(${1:node})", "prefix": "gui.delete_node(node)", "description": "deletes a node"}], "math.max(x, ...)": [{"body": "math.max(${1:x}, ${2:...})", "prefix": "math.max(x, ...)", "description": "the highest of one or more numbers"}], "crash.SYSFIELD_SYSTEM_VERSION": [{"body": "crash.SYSFIELD_SYSTEM_VERSION", "prefix": "crash.SYSFIELD_SYSTEM_VERSION", "description": "system version as reported by sys.get_sys_info"}], "vmath.matrix4_rotation_z(angle)": [{"body": "vmath.matrix4_rotation_z(${1:angle})", "prefix": "vmath.matrix4_rotation_z(angle)", "description": "creates a matrix from rotation around z-axis"}], "render.FACE_FRONT": [{"body": "render.FACE_FRONT", "prefix": "render.FACE_FRONT", "description": ""}], "gui.EASING_INOUTELASTIC": [{"body": "gui.EASING_INOUTELASTIC", "prefix": "gui.EASING_INOUTELASTIC", "description": "in-out-elastic"}], "scale": [{"body": "\"scale\"", "prefix": "scale", "description": "number | vector3 label scale"}, {"body": "\"scale\"", "prefix": "scale", "description": "number game object scale"}, {"body": "\"scale\"", "prefix": "scale", "description": "vector3 sprite scale"}], "profiler.VIEW_MODE_FULL": [{"body": "profiler.VIEW_MODE_FULL", "prefix": "profiler.VIEW_MODE_FULL", "description": "show full profiler ui"}], "string.gsub(s, pattern, repl, [n])": [{"body": "string.gsub(${1:s}, ${2:pattern}, ${3:repl}, ${4:[n]})", "prefix": "string.gsub(s, pattern, repl, [n])", "description": "substitute strings inside another string"}], "buffer.get_bytes(buffer, stream_name)": [{"body": "buffer.get_bytes(${1:buffer}, ${2:stream_name})", "prefix": "buffer.get_bytes(buffer, stream_name)", "description": "gets data from a stream"}], "vmath.matrix4(m1)": [{"body": "vmath.matrix4(${1:m1})", "prefix": "vmath.matrix4(m1)", "description": "creates a new matrix from another existing matrix"}], "render.COMPARE_FUNC_LESS": [{"body": "render.COMPARE_FUNC_LESS", "prefix": "render.COMPARE_FUNC_LESS", "description": ""}], "vmath.matrix4": [{"body": "vmath.matrix4()", "prefix": "vmath.matrix4", "description": "creates a new identity matrix"}], "timer.INVALID_TIMER_HANDLE": [{"body": "timer.INVALID_TIMER_HANDLE", "prefix": "timer.INVALID_TIMER_HANDLE", "description": "Indicates an invalid timer handle"}], "string.find(s, pattern, [init], [plain])": [{"body": "string.find(${1:s}, ${2:pattern}, ${3:[init]}, ${4:[plain]})", "prefix": "string.find(s, pattern, [init], [plain])", "description": "searches a string for a pattern"}], "go.delete([id], [recursive])": [{"body": "go.delete(${1:[id]}, ${2:[recursive]})", "prefix": "go.delete([id], [recursive])", "description": "delete one or more game object instances"}], "select(index, ...)": [{"body": "select(${1:index}, ${2:...})", "prefix": "select(index, ...)", "description": "returns items in a list"}], "gui.animate(node, property, to, easing, duration, [delay], [complete_function], [playback])": [{"body": "gui.animate(${1:node}, ${2:property}, ${3:to}, ${4:easing}, ${5:duration}, ${6:[delay]}, ${7:[complete_function]}, ${8:[playback]})", "prefix": "gui.animate(node, property, to, easing, duration, [delay], [complete_function], [playback])", "description": "animates a node property"}], "gui.PIVOT_E": [{"body": "gui.PIVOT_E", "prefix": "gui.PIVOT_E", "description": "east pivot"}], "particlefx.set_constant(url, emitter, constant, value)": [{"body": "particlefx.set_constant(${1:url}, ${2:emitter}, ${3:constant}, ${4:value})", "prefix": "particlefx.set_constant(url, emitter, constant, value)", "description": "set a shader constant for a particle FX component emitter"}], "render.set_viewport(x, y, width, height)": [{"body": "render.set_viewport(${1:x}, ${2:y}, ${3:width}, ${4:height})", "prefix": "render.set_viewport(x, y, width, height)", "description": "sets the render viewport"}], "go.EASING_INELASTIC": [{"body": "go.EASING_INELASTIC", "prefix": "go.EASING_INELASTIC", "description": "in-elastic"}], "spine.set_ik_target_position(url, ik_constraint_id, position)": [{"body": "spine.set_ik_target_position(${1:url}, ${2:ik_constraint_id}, ${3:position})", "prefix": "spine.set_ik_target_position(url, ik_constraint_id, position)", "description": "set the target position of an IK constraint object"}], "window.WINDOW_EVENT_FOCUS_LOST": [{"body": "window.WINDOW_EVENT_FOCUS_LOST", "prefix": "window.WINDOW_EVENT_FOCUS_LOST", "description": "focus lost window event"}], "gui.PIVOT_N": [{"body": "gui.PIVOT_N", "prefix": "gui.PIVOT_N", "description": "north pivot"}], "image.load(buffer, [premult])": [{"body": "image.load(${1:buffer}, ${2:[premult]})", "prefix": "image.load(buffer, [premult])", "description": "load image from buffer"}], "gui.PIVOT_W": [{"body": "gui.PIVOT_W", "prefix": "gui.PIVOT_W", "description": "west pivot"}], "gui.EASING_INSINE": [{"body": "gui.EASING_INSINE", "prefix": "gui.EASING_INSINE", "description": "in-sine"}], "server:getsockname": [{"body": "server:getsockname()", "prefix": "server:getsockname", "description": "gets the local address information from server"}], "gui.ANCHOR_LEFT": [{"body": "gui.ANCHOR_LEFT", "prefix": "gui.ANCHOR_LEFT", "description": "left x-anchor"}], "debug.debug": [{"body": "debug.debug()", "prefix": "debug.debug", "description": "enters interactive debugging"}], "gui.set_fill_angle(node, angle)": [{"body": "gui.set_fill_angle(${1:node}, ${2:angle})", "prefix": "gui.set_fill_angle(node, angle)", "description": "sets the angle for the filled pie sector"}], "gui.EASING_OUTINQUINT": [{"body": "gui.EASING_OUTINQUINT", "prefix": "gui.EASING_OUTINQUINT", "description": "out-in-quintic"}], "vmath.lerp(t, v1, v2)": [{"body": "vmath.lerp(${1:t}, ${2:v1}, ${3:v2})", "prefix": "vmath.lerp(t, v1, v2)", "description": "lerps between two vectors"}], "vmath.length_sqr(v)": [{"body": "vmath.length_sqr(${1:v})", "prefix": "vmath.length_sqr(v)", "description": "calculates the squared length of a vector or quaternion"}], "string.rep(s, n)": [{"body": "string.rep(${1:s}, ${2:n})", "prefix": "string.rep(s, n)", "description": "returns repeated copies of a string"}], "go.property(name, value)": [{"body": "go.property(${1:name}, ${2:value})", "prefix": "go.property(name, value)", "description": "define a property for the script"}], "label.get_text(url)": [{"body": "label.get_text(${1:url})", "prefix": "label.get_text(url)", "description": "gets the text for a label"}], "crash.SYSFIELD_DEVICE_MODEL": [{"body": "crash.SYSFIELD_DEVICE_MODEL", "prefix": "crash.SYSFIELD_DEVICE_MODEL", "description": "device model as reported by sys.get_sys_info"}], "gui.EASING_INOUTCUBIC": [{"body": "gui.EASING_INOUTCUBIC", "prefix": "gui.EASING_INOUTCUBIC", "description": "in-out-cubic"}], "render.set_stencil_mask(mask)": [{"body": "render.set_stencil_mask(${1:mask})", "prefix": "render.set_stencil_mask(mask)", "description": "sets the stencil mask"}], "render.FORMAT_RGB": [{"body": "render.FORMAT_RGB", "prefix": "render.FORMAT_RGB", "description": ""}], "proxy_unloaded": [{"body": "msg.post(${1:receiver}, \"proxy_unloaded\")", "prefix": "proxy_unloaded", "description": "reports that a collection proxy has unloaded its referenced collection"}], "socket.tcp": [{"body": "socket.tcp()", "prefix": "socket.tcp", "description": "creates a new IPv4 TCP master object"}], "gui.EASING_OUTBACK": [{"body": "gui.EASING_OUTBACK", "prefix": "gui.EASING_OUTBACK", "description": "out-back"}], "gui.get_layout": [{"body": "gui.get_layout()", "prefix": "gui.get_layout", "description": "gets the scene current layout"}], "gui.PIVOT_CENTER": [{"body": "gui.PIVOT_CENTER", "prefix": "gui.PIVOT_CENTER", "description": "center pivot"}], "vmath.vector3(x, y, z)": [{"body": "vmath.vector3(${1:x}, ${2:y}, ${3:z})", "prefix": "vmath.vector3(x, y, z)", "description": "creates a new vector from its coordinates"}], "gui.EASING_OUTINBOUNCE": [{"body": "gui.EASING_OUTINBOUNCE", "prefix": "gui.EASING_OUTINBOUNCE", "description": "out-in-bounce"}], "sprite.set_vflip(url, flip)": [{"body": "sprite.set_vflip(${1:url}, ${2:flip})", "prefix": "sprite.set_vflip(url, flip)", "description": "set vertical flipping on a sprite's animations"}], "connected:getsockname": [{"body": "connected:getsockname()", "prefix": "connected:getsockname", "description": "gets the local address information associated to the socket"}], "rawset(table, index, value)": [{"body": "rawset(${1:table}, ${2:index}, ${3:value})", "prefix": "rawset(table, index, value)", "description": "sets the value of a table item without invoking metamethods"}], "image": [{"body": "\"image\"", "prefix": "image", "description": "hash sprite image"}], "crash.SYSFIELD_MANUFACTURER": [{"body": "crash.SYSFIELD_MANUFACTURER", "prefix": "crash.SYSFIELD_MANUFACTURER", "description": "device manufacturer as reported by sys.get_sys_info"}], "physics.JOINT_TYPE_SPRING(length, frequency, damping)": [{"body": "physics.JOINT_TYPE_SPRING", "prefix": "physics.JOINT_TYPE_SPRING(length, frequency, damping)", "description": "spring joint type"}], "start_record(file_name, frame_period, fps)": [{"body": "msg.post(${1:receiver}, \"start_record\", ${2:{${3:file_name}, ${4:frame_period}, ${5:fps}\\}})", "prefix": "start_record(file_name, frame_period, fps)", "description": "starts video recording"}], "window.DIMMING_OFF": [{"body": "window.DIMMING_OFF", "prefix": "window.DIMMING_OFF", "description": "dimming mode off"}], "math.tanh(x)": [{"body": "math.tanh(${1:x})", "prefix": "math.tanh(x)", "description": "hyperbolic tangent"}], "math.randomseed(x)": [{"body": "math.randomseed(${1:x})", "prefix": "math.randomseed(x)", "description": "seeds the random number generator"}], "physics.JOINT_TYPE_SLIDER(local_axis_a, reference_angle, enable_limit, lower_translation, upper_translation, enable_motor, max_motor_force, motor_speed, joint_translation, joint_speed)": [{"body": "physics.JOINT_TYPE_SLIDER", "prefix": "physics.JOINT_TYPE_SLIDER(local_axis_a, reference_angle, enable_limit, lower_translation, upper_translation, enable_motor, max_motor_force, motor_speed, joint_translation, joint_speed)", "description": "slider joint type"}], "physics.raycast(from, to, groups, options)": [{"body": "physics.raycast(${1:from}, ${2:to}, ${3:groups}, ${4:options})", "prefix": "physics.raycast(from, to, groups, options)", "description": "requests a ray cast to be performed"}], "gui.EASING_OUTQUINT": [{"body": "gui.EASING_OUTQUINT", "prefix": "gui.EASING_OUTQUINT", "description": "out-quintic"}], "physics.get_gravity": [{"body": "physics.get_gravity()", "prefix": "physics.get_gravity", "description": "get the gravity for collection"}], "socket.skip(d, [ret1], [ret2], [retN])": [{"body": "socket.skip(${1:d}, ${2:[ret1]}, ${3:[ret2]}, ${4:[retN]})", "prefix": "socket.skip(d, [ret1], [ret2], [retN])", "description": "drops a number of arguments and returns the remaining"}], "master:setstats(received, sent, age)": [{"body": "master:setstats(${1:received}, ${2:sent}, ${3:age})", "prefix": "master:setstats(received, sent, age)", "description": "resets accounting information on the socket"}], "gui.set_flipbook_playback_rate(node, playback_rate)": [{"body": "gui.set_flipbook_playback_rate(${1:node}, ${2:playback_rate})", "prefix": "gui.set_flipbook_playback_rate(node, playback_rate)", "description": "sets the playback rate of the flipbook animation on a node"}], "render.set_stencil_func(func, ref, mask)": [{"body": "render.set_stencil_func(${1:func}, ${2:ref}, ${3:mask})", "prefix": "render.set_stencil_func(func, ref, mask)", "description": "sets the stencil test function"}], "sys.NETWORK_DISCONNECTED": [{"body": "sys.NETWORK_DISCONNECTED", "prefix": "sys.NETWORK_DISCONNECTED", "description": "no network connection found"}], "gui.PLAYBACK_LOOP_PINGPONG": [{"body": "gui.PLAYBACK_LOOP_PINGPONG", "prefix": "gui.PLAYBACK_LOOP_PINGPONG", "description": "ping pong loop"}], "math.sin(x)": [{"body": "math.sin(${1:x})", "prefix": "math.sin(x)", "description": "sine"}], "gui.show_keyboard(type, autoclose)": [{"body": "gui.show_keyboard(${1:type}, ${2:autoclose})", "prefix": "gui.show_keyboard(type, autoclose)", "description": "shows the on-display keyboard if available  "}], "render.STENCIL_OP_INCR_WRAP": [{"body": "render.STENCIL_OP_INCR_WRAP", "prefix": "render.STENCIL_OP_INCR_WRAP", "description": ""}], "setmetatable(table, metatable)": [{"body": "setmetatable(${1:table}, ${2:metatable})", "prefix": "setmetatable(table, metatable)", "description": "sets the metatable for a table"}], "render.enable_state(state)": [{"body": "render.enable_state(${1:state})", "prefix": "render.enable_state(state)", "description": "enables a render state"}], "gain": [{"body": "\"gain\"", "prefix": "gain", "description": "number sound gain"}], "render.RENDER_TARGET_DEFAULT": [{"body": "render.RENDER_TARGET_DEFAULT", "prefix": "render.RENDER_TARGET_DEFAULT", "description": ""}], "render.STATE_STENCIL_TEST": [{"body": "render.STATE_STENCIL_TEST", "prefix": "render.STATE_STENCIL_TEST", "description": ""}], "render.draw_debug3d": [{"body": "render.draw_debug3d()", "prefix": "render.draw_debug3d", "description": "draws all 3d debug graphics"}], "gui.set_parent(node, parent, keep_scene_transform)": [{"body": "gui.set_parent(${1:node}, ${2:parent}, ${3:keep_scene_transform})", "prefix": "gui.set_parent(node, parent, keep_scene_transform)", "description": "sets the parent of the node"}], "buffer.VALUE_TYPE_UINT16": [{"body": "buffer.VALUE_TYPE_UINT16", "prefix": "buffer.VALUE_TYPE_UINT16", "description": "uint16"}], "render.COMPARE_FUNC_GEQUAL": [{"body": "render.COMPARE_FUNC_GEQUAL", "prefix": "render.COMPARE_FUNC_GEQUAL", "description": ""}], "math.asin(x)": [{"body": "math.asin(${1:x})", "prefix": "math.asin(x)", "description": "arc sine"}], "os.clock": [{"body": "os.clock()", "prefix": "os.clock", "description": "amount of elapsed/CPU time used (depending on OS)"}], "os.difftime(t2, t1)": [{"body": "os.difftime(${1:t2}, ${2:t1})", "prefix": "os.difftime(t2, t1)", "description": "calculates a time difference in seconds"}], "gui.EASING_INCIRC": [{"body": "gui.EASING_INCIRC", "prefix": "gui.EASING_INCIRC", "description": "in-circlic"}], "sys.set_vsync_swap_interval(swap_interval)": [{"body": "sys.set_vsync_swap_interval(${1:swap_interval})", "prefix": "sys.set_vsync_swap_interval(swap_interval)", "description": "set vsync swap interval"}], "msg.url": [{"body": "msg.url()", "prefix": "msg.url", "description": "creates a new URL"}], "gui.get_spine_skin(node)": [{"body": "gui.get_spine_skin(${1:node})", "prefix": "gui.get_spine_skin(node)", "description": "gets the skin of a spine node"}], "connected:getpeername": [{"body": "connected:getpeername()", "prefix": "connected:getpeername", "description": "gets information about the UDP socket peer"}], "render.STENCIL_OP_KEEP": [{"body": "render.STENCIL_OP_KEEP", "prefix": "render.STENCIL_OP_KEEP", "description": ""}], "sys.get_application_path": [{"body": "sys.get_application_path()", "prefix": "sys.get_application_path", "description": "gets the application path"}], "go.EASING_INQUART": [{"body": "go.EASING_INQUART", "prefix": "go.EASING_INQUART", "description": "in-quartic"}], "bit.ror(x, n)": [{"body": "bit.ror(${1:x}, ${2:n})", "prefix": "bit.ror(x, n)", "description": "bitwise right rotation"}], "gui.EASING_OUTINCUBIC": [{"body": "gui.EASING_OUTINCUBIC", "prefix": "gui.EASING_OUTINCUBIC", "description": "out-in-cubic"}], "gui.BLEND_MULT": [{"body": "gui.BLEND_MULT", "prefix": "gui.BLEND_MULT", "description": "multiply blending"}], "string.upper(s)": [{"body": "string.upper(${1:s})", "prefix": "string.upper(s)", "description": "converts a string to upper-case"}], "gui.new_text_node(pos, text)": [{"body": "gui.new_text_node(${1:pos}, ${2:text})", "prefix": "gui.new_text_node(pos, text)", "description": "creates a new text node"}], "math.ceil(x)": [{"body": "math.ceil(${1:x})", "prefix": "math.ceil(x)", "description": "next higher integer value"}], "msg.url(urlstring)": [{"body": "msg.url(${1:urlstring})", "prefix": "msg.url(urlstring)", "description": "creates a new URL from a string"}], "gui.EASING_INQUINT": [{"body": "gui.EASING_INQUINT", "prefix": "gui.EASING_INQUINT", "description": "in-quintic"}], "render.STENCIL_OP_DECR": [{"body": "render.STENCIL_OP_DECR", "prefix": "render.STENCIL_OP_DECR", "description": ""}], "gui.get_flipbook_cursor(node)": [{"body": "gui.get_flipbook_cursor(${1:node})", "prefix": "gui.get_flipbook_cursor(node)", "description": "gets the normalized cursor of the animation on a node with flipbook animation"}], "set_parent(parent_id, keep_world_transform)": [{"body": "msg.post(${1:receiver}, \"set_parent\", ${2:{${3:parent_id}, ${4:keep_world_transform}\\}})", "prefix": "set_parent(parent_id, keep_world_transform)", "description": "sets the parent of the receiving instance"}], "go.EASING_INBOUNCE": [{"body": "go.EASING_INBOUNCE", "prefix": "go.EASING_INBOUNCE", "description": "in-bounce"}], "gui.new_texture(texture, width, height, type, buffer, flip)": [{"body": "gui.new_texture(${1:texture}, ${2:width}, ${3:height}, ${4:type}, ${5:buffer}, ${6:flip})", "prefix": "gui.new_texture(texture, width, height, type, buffer, flip)", "description": "create new texture"}], "sound.set_group_gain(group, gain)": [{"body": "sound.set_group_gain(${1:group}, ${2:gain})", "prefix": "sound.set_group_gain(group, gain)", "description": "set mixer group gain"}], "crash.SYSFIELD_ENGINE_HASH": [{"body": "crash.SYSFIELD_ENGINE_HASH", "prefix": "crash.SYSFIELD_ENGINE_HASH", "description": "engine version as hash"}], "crash.USERFIELD_SIZE": [{"body": "crash.USERFIELD_SIZE", "prefix": "crash.USERFIELD_SIZE", "description": "The max size of a single user field."}], "go.get_parent([id])": [{"body": "go.get_parent(${1:[id]})", "prefix": "go.get_parent([id])", "description": "get the parent for a specific game object instance"}], "gui.move_above(node, node)": [{"body": "gui.move_above(${1:node}, ${2:node})", "prefix": "gui.move_above(node, node)", "description": "moves the first node above the second"}], "debug.getlocal([thread], level, local)": [{"body": "debug.getlocal(${1:[thread]}, ${2:level}, ${3:local})", "prefix": "debug.getlocal([thread], level, local)", "description": "returns name and value of a local variable"}], "resize(height, width)": [{"body": "msg.post(${1:receiver}, \"resize\", ${2:{${3:height}, ${4:width}\\}})", "prefix": "resize(height, width)", "description": "resizes the window"}], "render.clear(buffers)": [{"body": "render.clear(${1:buffers})", "prefix": "render.clear(buffers)", "description": "clears the active render target"}], "io.write(...)": [{"body": "io.write(${1:...})", "prefix": "io.write(...)", "description": "writes to the default output file"}], "gui.EASING_INQUAD": [{"body": "gui.EASING_INQUAD", "prefix": "gui.EASING_INQUAD", "description": "in-quadratic"}], "render.FACE_FRONT_AND_BACK": [{"body": "render.FACE_FRONT_AND_BACK", "prefix": "render.FACE_FRONT_AND_BACK", "description": ""}], "gui.PLAYBACK_LOOP_FORWARD": [{"body": "gui.PLAYBACK_LOOP_FORWARD", "prefix": "gui.PLAYBACK_LOOP_FORWARD", "description": "loop forward"}], "mass": [{"body": "\"mass\"", "prefix": "mass", "description": "number collision object mass"}], "spine.play_anim(url, anim_id, playback, [play_properties], [complete_function])": [{"body": "spine.play_anim(${1:url}, ${2:anim_id}, ${3:playback}, ${4:[play_properties]}, ${5:[complete_function]})", "prefix": "spine.play_anim(url, anim_id, playback, [play_properties], [complete_function])", "description": "play an animation on a spine model"}], "gui.set_tracking(node, tracking)": [{"body": "gui.set_tracking(${1:node}, ${2:tracking})", "prefix": "gui.set_tracking(node, tracking)", "description": "sets the tracking of the text node"}], "tonumber(e, [base])": [{"body": "tonumber(${1:e}, ${2:[base]})", "prefix": "tonumber(e, [base])", "description": "converts a string (of the given base) to a number"}], "gui.get_flipbook_playback_rate(node)": [{"body": "gui.get_flipbook_playback_rate(${1:node})", "prefix": "gui.get_flipbook_playback_rate(node)", "description": "gets the playback rate of the flipbook animation on a node"}], "string.char(...)": [{"body": "string.char(${1:...})", "prefix": "string.char(...)", "description": "converts ASCII codes into their equivalent characters"}], "clear_color(color)": [{"body": "msg.post(${1:receiver}, \"clear_color\", ${2:{${3:color}\\}})", "prefix": "clear_color(color)", "description": "set clear color"}], "spine_animation_done(animation_id, playback)": [{"body": "msg.post(${1:receiver}, \"spine_animation_done\", ${2:{${3:animation_id}, ${4:playback}\\}})", "prefix": "spine_animation_done(animation_id, playback)", "description": "reports the completion of a Spine animation"}], "spine.set_ik_target(url, ik_constraint_id, target_url)": [{"body": "spine.set_ik_target(${1:url}, ${2:ik_constraint_id}, ${3:target_url})", "prefix": "spine.set_ik_target(url, ik_constraint_id, target_url)", "description": "set the IK constraint object target position to follow position of a game object"}], "go.EASING_OUTBOUNCE": [{"body": "go.EASING_OUTBOUNCE", "prefix": "go.EASING_OUTBOUNCE", "description": "out-bounce"}], "math.fmod(x, y)": [{"body": "math.fmod(${1:x}, ${2:y})", "prefix": "math.fmod(x, y)", "description": "the modulus (remainder) of doing: v1 / v2"}], "crash.SYSFIELD_MAX": [{"body": "crash.SYSFIELD_MAX", "prefix": "crash.SYSFIELD_MAX", "description": "The max number of sysfields."}], "crash.get_backtrace(handle)": [{"body": "crash.get_backtrace(${1:handle})", "prefix": "crash.get_backtrace(handle)", "description": "read backtrace recorded in a loaded crash dump"}], "vmath.matrix4_rotation_x(angle)": [{"body": "vmath.matrix4_rotation_x(${1:angle})", "prefix": "vmath.matrix4_rotation_x(angle)", "description": "creates a matrix from rotation around x-axis"}], "table.concat(table, [sep], [i], [j])": [{"body": "table.concat(${1:table}, ${2:[sep]}, ${3:[i]}, ${4:[j]})", "prefix": "table.concat(table, [sep], [i], [j])", "description": "concatenates table items together into a string"}], "io.lines([filename])": [{"body": "io.lines(${1:[filename]})", "prefix": "io.lines([filename])", "description": "returns an iterator function for reading a named file line-by-line"}], "package.path": [{"body": "package.path()", "prefix": "package.path", "description": "search path used for loading Lua code using the require function"}], "sound.stop(url)": [{"body": "sound.stop(${1:url})", "prefix": "sound.stop(url)", "description": "stop a playing a sound(s)"}], "vmath.matrix4_translation(position)": [{"body": "vmath.matrix4_translation(${1:position})", "prefix": "vmath.matrix4_translation(position)", "description": "creates a translation matrix from a position vector"}], "playback_rate": [{"body": "\"playback_rate\"", "prefix": "playback_rate", "description": "number model playback_rate"}, {"body": "\"playback_rate\"", "prefix": "playback_rate", "description": "number sprite playback_rate"}, {"body": "\"playback_rate\"", "prefix": "playback_rate", "description": "number spine playback_rate"}], "socket.sleep(time)": [{"body": "socket.sleep(${1:time})", "prefix": "socket.sleep(time)", "description": "sleeps for a number of seconds"}], "render.BLEND_ONE_MINUS_CONSTANT_COLOR": [{"body": "render.BLEND_ONE_MINUS_CONSTANT_COLOR", "prefix": "render.BLEND_ONE_MINUS_CONSTANT_COLOR", "description": ""}], "gui.ANCHOR_RIGHT": [{"body": "gui.ANCHOR_RIGHT", "prefix": "gui.ANCHOR_RIGHT", "description": "right x-anchor"}], "unload": [{"body": "msg.post(${1:receiver}, \"unload\")", "prefix": "unload", "description": "tells a collection proxy to start unloading the referenced collection"}], "client:dirty": [{"body": "client:dirty()", "prefix": "client:dirty", "description": "checks the read buffer status"}], "vmath.matrix4_from_quat(q)": [{"body": "vmath.matrix4_from_quat(${1:q})", "prefix": "vmath.matrix4_from_quat(q)", "description": "creates a matrix from a quaternion"}], "package.loaded": [{"body": "package.loaded()", "prefix": "package.loaded", "description": "table of loaded packages"}], "table.maxn(table)": [{"body": "table.maxn(${1:table})", "prefix": "table.maxn(table)", "description": "returns the highest numeric key in the table"}], "go.EASING_OUTINQUART": [{"body": "go.EASING_OUTINQUART", "prefix": "go.EASING_OUTINQUART", "description": "out-in-quartic"}], "draw_line(start_point, end_point, color)": [{"body": "msg.post(${1:receiver}, \"draw_line\", ${2:{${3:start_point}, ${4:end_point}, ${5:color}\\}})", "prefix": "draw_line(start_point, end_point, color)", "description": "draw a line on the screen"}], "gui.PROP_SHADOW": [{"body": "gui.PROP_SHADOW", "prefix": "gui.PROP_SHADOW", "description": "shadow color property"}], "tile_source": [{"body": "\"tile_source\"", "prefix": "tile_source", "description": "hash tile source"}], "gui.EASING_OUTCUBIC": [{"body": "gui.EASING_OUTCUBIC", "prefix": "gui.EASING_OUTCUBIC", "description": "out-cubic"}], "window.set_listener(callback)": [{"body": "window.set_listener(${1:callback})", "prefix": "window.set_listener(callback)", "description": "sets a window event listener"}]}